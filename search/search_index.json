{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HEAL Data Utilities \u00b6 The HEAL data utilities python package provides data packaging tools for the HEAL data ecosystem to facilitate data discovery,sharing, and harmonization with a focus on the HEAL platform data consultancy (DSC). Currently, the focus of the repo is on generating data-dictionaries (see Variable level metadata section below). However, in the future, this will be expanded for all heal specific data packaging functions (e.g., study and file level metadata and data). Installation \u00b6 To install the latest official release of healdata-utils, from your computer's command prompt, run: pip install healdata-utils to install the working, un-released version from this git repository, run: pip install git+https://github.com/norc-heal/healdata-utils.git Variable level metadata (data dictionaries) \u00b6 The healdata-utils variable level metadata (vlmd) tool inputs a variety of different input file types and exports HEAL-formatted data dictionaries (JSON and CSV formats). Additionally, exported validation (ie \"error\") reports provide the user information as to a. if the exported data dictionary is valid according to HEAL specifications (see the schema repository here ). For support formats and more detailed software specific instructions and recommendations, see here Basic usage \u00b6 The vlmd tool can be used via python or the command line. Using from python \u00b6 From your current working directory in python, run: from healdata_utils.cli import convert_to_vlmd # description and title are optional. If submitting through platform, can fill these out there. description = \"This is a proof of concept to demonstrate the healdata-utils functionality\" title = \"Healdata-utils Demonstration Data Dictionary\" healdir = \"output\" # can also specify a file name if desired (eg output/thisismynewdd.csv) inputpath = \"input/my-redcap-data-dictionary-export.csv\" data_dictionaries = convert_to_vlmd ( filepath = inputpath , outputdir = healdir , inputtype = input_type , #if not specified, looks for suffix data_dictionary_props = { \"title\" : title , \"description\" : description } #data_dictionary_props is optional ) This will output the data dictionaries to the specified output directory (see ooutput section below) and also save the json/csv versions in the data_dictionaries object. For the available input file formats (ie the available choices for the inputtype parameter), one can run (from python): from healdata_utils.cli import input_descriptions input_descriptions The input_descriptions object contains the choice for inputtype as the key and the description as the value. Using from the command line \u00b6 From your current working directory run: (note the \\ at the end of each line signals a line continuation for ease in understanding the long one line command.) Again the --title and --description options are optional. For descriptions on the different flags/options, run vlmd --help vlmd --filepath \"data/example_pyreadstat_output.sav\" \\ --outputdir \"output-cli\" \\ --title \"Healdata-utils Demonstration Data Dictionary\" \\ --description \"This is a proof of concept to demonstrate the healdata-utils functionality\" Output \u00b6 Both the python and command line routes will result in a JSON and CSV version of the HEAL data dictionary in the output folder along with the validation reports in the errors folder. See below: input/input/my-redcap-data-dictionary-export.csv : your input file output/errors/heal-csv-errors.json : outputted validation report for table in csv file against frictionless schema see schema here output/errors/heal-json-errors.json : outputted jsonschema validation report. see schema here output/heal-csvtemplate-data-dictionary.csv : This is the CSV data dictionary output/heal-jsontemplate-data-dictionary.json : This is the JSON version of the data dictionary Note, only the JSON version will have the user-specified title and description Interactive notebooks \u00b6 See the below notebooks demonstrating use and workflows using the convert_to_vlmd in python and vlmd in the command line. Clicking on the \"binder badges\" will bring you to an interactive notebook page where you can test out the notebooks. Here, healdata-utils comes pre-installed. Generating a heal data dictionary from a variety of input files click here for static notebook click binder badge for interactive [in development] Creating and iterating over a csv data dictionary to create a valid data dictionary file click here","title":"Home"},{"location":"#heal-data-utilities","text":"The HEAL data utilities python package provides data packaging tools for the HEAL data ecosystem to facilitate data discovery,sharing, and harmonization with a focus on the HEAL platform data consultancy (DSC). Currently, the focus of the repo is on generating data-dictionaries (see Variable level metadata section below). However, in the future, this will be expanded for all heal specific data packaging functions (e.g., study and file level metadata and data).","title":"HEAL Data Utilities"},{"location":"#installation","text":"To install the latest official release of healdata-utils, from your computer's command prompt, run: pip install healdata-utils to install the working, un-released version from this git repository, run: pip install git+https://github.com/norc-heal/healdata-utils.git","title":"Installation"},{"location":"#variable-level-metadata-data-dictionaries","text":"The healdata-utils variable level metadata (vlmd) tool inputs a variety of different input file types and exports HEAL-formatted data dictionaries (JSON and CSV formats). Additionally, exported validation (ie \"error\") reports provide the user information as to a. if the exported data dictionary is valid according to HEAL specifications (see the schema repository here ). For support formats and more detailed software specific instructions and recommendations, see here","title":"Variable level metadata (data dictionaries)"},{"location":"#basic-usage","text":"The vlmd tool can be used via python or the command line.","title":"Basic usage"},{"location":"#using-from-python","text":"From your current working directory in python, run: from healdata_utils.cli import convert_to_vlmd # description and title are optional. If submitting through platform, can fill these out there. description = \"This is a proof of concept to demonstrate the healdata-utils functionality\" title = \"Healdata-utils Demonstration Data Dictionary\" healdir = \"output\" # can also specify a file name if desired (eg output/thisismynewdd.csv) inputpath = \"input/my-redcap-data-dictionary-export.csv\" data_dictionaries = convert_to_vlmd ( filepath = inputpath , outputdir = healdir , inputtype = input_type , #if not specified, looks for suffix data_dictionary_props = { \"title\" : title , \"description\" : description } #data_dictionary_props is optional ) This will output the data dictionaries to the specified output directory (see ooutput section below) and also save the json/csv versions in the data_dictionaries object. For the available input file formats (ie the available choices for the inputtype parameter), one can run (from python): from healdata_utils.cli import input_descriptions input_descriptions The input_descriptions object contains the choice for inputtype as the key and the description as the value.","title":"Using from python"},{"location":"#using-from-the-command-line","text":"From your current working directory run: (note the \\ at the end of each line signals a line continuation for ease in understanding the long one line command.) Again the --title and --description options are optional. For descriptions on the different flags/options, run vlmd --help vlmd --filepath \"data/example_pyreadstat_output.sav\" \\ --outputdir \"output-cli\" \\ --title \"Healdata-utils Demonstration Data Dictionary\" \\ --description \"This is a proof of concept to demonstrate the healdata-utils functionality\"","title":"Using from the command line"},{"location":"#output","text":"Both the python and command line routes will result in a JSON and CSV version of the HEAL data dictionary in the output folder along with the validation reports in the errors folder. See below: input/input/my-redcap-data-dictionary-export.csv : your input file output/errors/heal-csv-errors.json : outputted validation report for table in csv file against frictionless schema see schema here output/errors/heal-json-errors.json : outputted jsonschema validation report. see schema here output/heal-csvtemplate-data-dictionary.csv : This is the CSV data dictionary output/heal-jsontemplate-data-dictionary.json : This is the JSON version of the data dictionary Note, only the JSON version will have the user-specified title and description","title":"Output"},{"location":"#interactive-notebooks","text":"See the below notebooks demonstrating use and workflows using the convert_to_vlmd in python and vlmd in the command line. Clicking on the \"binder badges\" will bring you to an interactive notebook page where you can test out the notebooks. Here, healdata-utils comes pre-installed. Generating a heal data dictionary from a variety of input files click here for static notebook click binder badge for interactive [in development] Creating and iterating over a csv data dictionary to create a valid data dictionary file click here","title":"Interactive notebooks"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"install/","text":"","title":"Install"},{"location":"vlmd/","text":"Variable level metadata (data dictionaries) \u00b6 The healdata-utils variable level metadata (vlmd) tool inputs a variety of different input file types and exports HEAL-formatted data dictionaries (JSON and CSV formats). Additionally, exported validation (ie \"error\") reports provide the user information as to a. if the exported data dictionary is valid according to HEAL specifications and information on how to modify one's data dictionary to conform to make HEAL compliant. For support formats and more detailed software-specific instructions and recommendations, see here For more information on variable level metadata properties (fields), see the csv field specification and json field specification .","title":"Index"},{"location":"vlmd/#variable-level-metadata-data-dictionaries","text":"The healdata-utils variable level metadata (vlmd) tool inputs a variety of different input file types and exports HEAL-formatted data dictionaries (JSON and CSV formats). Additionally, exported validation (ie \"error\") reports provide the user information as to a. if the exported data dictionary is valid according to HEAL specifications and information on how to modify one's data dictionary to conform to make HEAL compliant. For support formats and more detailed software-specific instructions and recommendations, see here For more information on variable level metadata properties (fields), see the csv field specification and json field specification .","title":"Variable level metadata (data dictionaries)"},{"location":"vlmd/supported_input_formats/","text":"Supported Input Formats \u00b6 In this section, supported formats for generating heal-compliant data dictionaries are listed. We also provide additional instructions on how to get the necessary input files format/software. Redcap: Data Dictionary CSV Export \u00b6 For users collecting data in a Redcap data management system, HEAL-compliant data dictionaries can be generated directly from Redcap exports. The redcap data dictionary export serves the purpose of providing variable level metadata in a standardized,tabular format and is generally easy to export. The HEAL data utilities leverages this user experience and standardized format to enable HEAL researchers to generate a Heal-compliant data dictionary. Export your Redcap data dictionary \u00b6 To download a Redcap CSV export do the following*: After logging in to your Redcap project page, locate the Data dictionary page. A link to this page may be available on the project side bar (see image below) or in the Project Setup tab at the top of your page. After arriving at the Data dictionary page, click on Download the current data dictionary to export the dictionary (see below). *there may be slight differences depending on your specific Redcap instance and version Run the vlmd command \u00b6 vlmd --filepath input/example_redcap_demo.redcap.csv --inputtype redcap.csv --outputdir output/heal-vlmd-from-redcap.csv SAS sas7bdat (and sas7bcat ) files \u00b6 To accomodate SAS users, HEAL data utilities supports the binary Sas7bdat file format, which contains the actual data values (observations/records). This file also includes variable metadata (variable names and variable labels/ descriptions ). HEAL data utilities also provides the option to accompany the sas7bdat file with a file of another format -- the Sas7bcat file. This type of file contains variable value labels, or encodings that can be mapped onto datasets. Creating a sas7bdat and a sas7bcat file \u00b6 Many SAS users create formats and labels in their current workflows. In this section, we provide syntax that can be easily copy-pasted into these existing workflows to create sas7bdat and sas7bcat files to input easily into the vlmd tool. This script template can be run separately or inserted directly at the end of a SAS user's workflow. Template template.sas /*1. Read in data file without value labels and run full code. Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps that assign formats and variable labels which are needed for the data dictionary*/ %INCLUDE \"<INSERT SAS SCRIPT HERE FILE PATH HERE>\" ; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/ %INCLUDE \"<INSERT SAS SCRIPT HERE FILE PATH HERE>\" ; /* THIS WILL RUN A SECOND SEPARATE SAS SCRIPT*/ /*2. Output the format catalog (sas7bcat) */ /*2a. If you do not have an out directory, assign one to output the SAS catalog and data file - maybe this should be at the very top?*/ libname out \"<INSERT THE DESIRED LOCATION (FILE PATH) TO YOUR SAS7BCAT AND SAS7BDAT FILES HERE>\" ; /*2b. Output the format catalog. The format catalog is automatically stored in work.formats. This step copies the format file to the out directory as a sas7bcat file.*/ proc catalog cat=work . FORMATS; copy out = out . FORMATS ; run; /*3. Output the data file (sas7bdat) */ data out . yourdata; set < INSERT THE NAME OF YOUR FINAL SAS DATASET HERE> ; run; The below SAS syntax is an example of how to use the template within your SAS workflow. Here we create all of our variable and value labels. This could be within one or multiple sas scripts but for demonstration purposes, we only use one script. In your existing workflows, these may also include analyses and other PROC calls for data exploration Example my_existing_sas_workflow.sas /*2. Read in input data */ proc import datafile= \"myprojectfolder/input/mydata.csv\" out =raw dbms=csv replace ; getnames=yes ; run; /*3. Set up proc format and apply formats and variable labels in data step */ proc format; VALUE YESNO 0 = \"No\" 1 = \"Yes\" VALUE PUBLIC 1 = 'State mental health authority (SMHA)' 2 = 'Other state government agency or department' 3 = 'Regional/district authority or county, local, or municipal government' 4 = 'Tribal government' 5 = 'Indian Health Service' 6 = 'Department of Veterans Affairs' 7 = 'Other' VALUE FOCUS 1 = 'Mental health treatment' 2 = 'Substance abuse treatment' 3 = 'Mix of mental health and substance abuse treatment (neither is primary)' 4 = 'General health care' 5 = 'Other service focus' ; **Apply formats; data processed; set raw; format YOUNGADULTS TREATPSYCHOTHRPY TREATTRAUMATHRPY YESNO. FOCUS FOCUS. PUBLIC PUBLIC.; label YOUNGADULTS= \"Accepts young adults (aged 18-25 years old) for Tx\" TREATPSYCHOTHRPY= \"Facility offers individual psychotherapy\" TREATTRAUMATHRPY= \"Facility offers trauma therapy\" FOCUS= \"Primary treatment focus of facility\" PUBLIC= \"Public agency or department that operates facility\" ; run; This second script called my_output.sas is the filled out template ( see here ). Note the %INCLUDE function that calls my_existing_sas_workflow.sas my_output.sas /*1. Read in data file without value labels and run full code. Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps that assign formats and variable labels which are needed for the data dictionary*/ %INCLUDE \"myprojectfolder/myworkflow.sas\" ; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/ /*2. Output the format catalog (sas7bcat) */ libname out \"myprojectfolder/output\" ; /*2b. Output the format catalog. The format catalog is automatically stored in work.formats. This step copies the format file to the out directory as a sas7bcat file.*/ proc catalog cat=work . FORMATS; copy out = out . FORMATS ; run; /*3. Output the data file (sas7bdat) to your output folder*/ data out . yourdata; set processed ; run; Run the vlmd command \u00b6 After creating the necessary sas7bdat and sas7bcat files, you can then run the vlmd command. Note, the sas7bcat files are optional. However, if you don't include, the encodings (ie value labels) will not be added. vlmd --filepath input/data.sas7bdat --sas7bcat-filepath input/formats.sas7bcat --inputtype sas7bdat SPSS .sav files \u00b6 For SPSS users, HEAL data utilities generates heal-compliant data dictioanries from SPSS's default file format for storing datasets: A SAV file. It not only stores the data itself but also stores metadata such as variable names, variable labels, types, and value labels. The HEAL data utilities extracts the data and metadata to create heal-compliant data dictionaries. Run the vlmd command \u00b6 vlmd --filepath data/example_pyreadstat_output.sav --inputtype sav Stata .dta files \u00b6 For Stata users, HEAL data utilities generates heal-compliant data dictionaries through Stata's default file format: the DTA files. DTA files not only store the data itself but also stores metadata such as variable names, variable labels, types, and value labels. Run the vlmd command \u00b6 vlmd --filepath data/example_pyreadstat_output.dta --inputtype dta csv Datasets \u00b6 CSV (comma-separated values) is the main open tabular data format for storage and exchange. It is easy to create and understand using basic text editors in addition to popular spreadsheet software like Google Sheets and Excel. Importantly, it is simple and can be easily integrated into web applications and just about any software. Currently, the HEAL data utilities vlmd function can infer a minimal-HEAL compliant dataset by inferring name , type ,and enum (i.e., possible values). After this minimal data dictionary is generated, the researcher can further annotate it with fields' description and other optional properties. csv HEAL data dictionary (e.g., from template) \u00b6 HEAL data utilities can also input a csv HEAL data dictionary either from a manually filled out template or as an additional step after additional annotation (e.g., from the HEAL csv data dictionary output of the above file formats). Creating a csv HEAL data dictionary \u00b6 Use the template and start from scratch > Click here to download a csv HEAL data dictionary template. Output from one of the above formats and then further annotate. Note To further annotate the data dictionary, see the variable level metadata field properties (with examples) here. Validate with the vlmd command \u00b6 After finishing your work on the csv HEAL data dictionary, run the vlmd command to ensure it is HEAL-compliant with: vlmd --filepath data/heal-dd-output.csv --inputtype csvtemplate json HEAL data dictionary (e.g., from template) \u00b6 While the csv HEAL data dictionary provides a tabular format for HEAL-compliant data dictionaries, ultimately, these csv data dictionary files are converted to a json file (the most common format to store and exchange data within web applications such as the HEAL data platform). The HEAL data utilities vlmd tool can also input this json HEAL data dictionary either from a manually filled out template or as an additional step after additional annotation. Another advantage of json HEAL data dictionaries is that one can specify metadata describing the data dictionary as a whole (e.g., the description and title ). Creating a json HEAL data dictionary \u00b6 Use the template and start from scratch > Click here to download a json HEAL data dictionary template. Output from one of the above formats and then further annotate. Note To further annotate the data dictionary, see the variable level metadata field properties (with examples) here. Validate with the vlmd command \u00b6 After finishing your work on the csv HEAL data dictionary, run the vlmd command to ensure it is HEAL-compliant with: vlmd --filepath data/heal-dd-output.json --inputtype jsontemplate","title":"Supported Input Formats"},{"location":"vlmd/supported_input_formats/#supported-input-formats","text":"In this section, supported formats for generating heal-compliant data dictionaries are listed. We also provide additional instructions on how to get the necessary input files format/software.","title":"Supported Input Formats"},{"location":"vlmd/supported_input_formats/#redcap-data-dictionary-csv-export","text":"For users collecting data in a Redcap data management system, HEAL-compliant data dictionaries can be generated directly from Redcap exports. The redcap data dictionary export serves the purpose of providing variable level metadata in a standardized,tabular format and is generally easy to export. The HEAL data utilities leverages this user experience and standardized format to enable HEAL researchers to generate a Heal-compliant data dictionary.","title":"Redcap: Data Dictionary CSV Export"},{"location":"vlmd/supported_input_formats/#export-your-redcap-data-dictionary","text":"To download a Redcap CSV export do the following*: After logging in to your Redcap project page, locate the Data dictionary page. A link to this page may be available on the project side bar (see image below) or in the Project Setup tab at the top of your page. After arriving at the Data dictionary page, click on Download the current data dictionary to export the dictionary (see below). *there may be slight differences depending on your specific Redcap instance and version","title":"Export your Redcap data dictionary"},{"location":"vlmd/supported_input_formats/#run-the-vlmd-command","text":"vlmd --filepath input/example_redcap_demo.redcap.csv --inputtype redcap.csv --outputdir output/heal-vlmd-from-redcap.csv","title":"Run the vlmd command"},{"location":"vlmd/supported_input_formats/#sas-sas7bdat-and-sas7bcat-files","text":"To accomodate SAS users, HEAL data utilities supports the binary Sas7bdat file format, which contains the actual data values (observations/records). This file also includes variable metadata (variable names and variable labels/ descriptions ). HEAL data utilities also provides the option to accompany the sas7bdat file with a file of another format -- the Sas7bcat file. This type of file contains variable value labels, or encodings that can be mapped onto datasets.","title":"SAS sas7bdat (and sas7bcat) files"},{"location":"vlmd/supported_input_formats/#creating-a-sas7bdat-and-a-sas7bcat-file","text":"Many SAS users create formats and labels in their current workflows. In this section, we provide syntax that can be easily copy-pasted into these existing workflows to create sas7bdat and sas7bcat files to input easily into the vlmd tool. This script template can be run separately or inserted directly at the end of a SAS user's workflow. Template template.sas /*1. Read in data file without value labels and run full code. Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps that assign formats and variable labels which are needed for the data dictionary*/ %INCLUDE \"<INSERT SAS SCRIPT HERE FILE PATH HERE>\" ; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/ %INCLUDE \"<INSERT SAS SCRIPT HERE FILE PATH HERE>\" ; /* THIS WILL RUN A SECOND SEPARATE SAS SCRIPT*/ /*2. Output the format catalog (sas7bcat) */ /*2a. If you do not have an out directory, assign one to output the SAS catalog and data file - maybe this should be at the very top?*/ libname out \"<INSERT THE DESIRED LOCATION (FILE PATH) TO YOUR SAS7BCAT AND SAS7BDAT FILES HERE>\" ; /*2b. Output the format catalog. The format catalog is automatically stored in work.formats. This step copies the format file to the out directory as a sas7bcat file.*/ proc catalog cat=work . FORMATS; copy out = out . FORMATS ; run; /*3. Output the data file (sas7bdat) */ data out . yourdata; set < INSERT THE NAME OF YOUR FINAL SAS DATASET HERE> ; run; The below SAS syntax is an example of how to use the template within your SAS workflow. Here we create all of our variable and value labels. This could be within one or multiple sas scripts but for demonstration purposes, we only use one script. In your existing workflows, these may also include analyses and other PROC calls for data exploration Example my_existing_sas_workflow.sas /*2. Read in input data */ proc import datafile= \"myprojectfolder/input/mydata.csv\" out =raw dbms=csv replace ; getnames=yes ; run; /*3. Set up proc format and apply formats and variable labels in data step */ proc format; VALUE YESNO 0 = \"No\" 1 = \"Yes\" VALUE PUBLIC 1 = 'State mental health authority (SMHA)' 2 = 'Other state government agency or department' 3 = 'Regional/district authority or county, local, or municipal government' 4 = 'Tribal government' 5 = 'Indian Health Service' 6 = 'Department of Veterans Affairs' 7 = 'Other' VALUE FOCUS 1 = 'Mental health treatment' 2 = 'Substance abuse treatment' 3 = 'Mix of mental health and substance abuse treatment (neither is primary)' 4 = 'General health care' 5 = 'Other service focus' ; **Apply formats; data processed; set raw; format YOUNGADULTS TREATPSYCHOTHRPY TREATTRAUMATHRPY YESNO. FOCUS FOCUS. PUBLIC PUBLIC.; label YOUNGADULTS= \"Accepts young adults (aged 18-25 years old) for Tx\" TREATPSYCHOTHRPY= \"Facility offers individual psychotherapy\" TREATTRAUMATHRPY= \"Facility offers trauma therapy\" FOCUS= \"Primary treatment focus of facility\" PUBLIC= \"Public agency or department that operates facility\" ; run; This second script called my_output.sas is the filled out template ( see here ). Note the %INCLUDE function that calls my_existing_sas_workflow.sas my_output.sas /*1. Read in data file without value labels and run full code. Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps that assign formats and variable labels which are needed for the data dictionary*/ %INCLUDE \"myprojectfolder/myworkflow.sas\" ; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/ /*2. Output the format catalog (sas7bcat) */ libname out \"myprojectfolder/output\" ; /*2b. Output the format catalog. The format catalog is automatically stored in work.formats. This step copies the format file to the out directory as a sas7bcat file.*/ proc catalog cat=work . FORMATS; copy out = out . FORMATS ; run; /*3. Output the data file (sas7bdat) to your output folder*/ data out . yourdata; set processed ; run;","title":"Creating a sas7bdat and a sas7bcat file"},{"location":"vlmd/supported_input_formats/#run-the-vlmd-command_1","text":"After creating the necessary sas7bdat and sas7bcat files, you can then run the vlmd command. Note, the sas7bcat files are optional. However, if you don't include, the encodings (ie value labels) will not be added. vlmd --filepath input/data.sas7bdat --sas7bcat-filepath input/formats.sas7bcat --inputtype sas7bdat","title":"Run the vlmd command"},{"location":"vlmd/supported_input_formats/#spss-sav-files","text":"For SPSS users, HEAL data utilities generates heal-compliant data dictioanries from SPSS's default file format for storing datasets: A SAV file. It not only stores the data itself but also stores metadata such as variable names, variable labels, types, and value labels. The HEAL data utilities extracts the data and metadata to create heal-compliant data dictionaries.","title":"SPSS .sav files"},{"location":"vlmd/supported_input_formats/#run-the-vlmd-command_2","text":"vlmd --filepath data/example_pyreadstat_output.sav --inputtype sav","title":"Run the vlmd command"},{"location":"vlmd/supported_input_formats/#stata-dta-files","text":"For Stata users, HEAL data utilities generates heal-compliant data dictionaries through Stata's default file format: the DTA files. DTA files not only store the data itself but also stores metadata such as variable names, variable labels, types, and value labels.","title":"Stata .dta files"},{"location":"vlmd/supported_input_formats/#run-the-vlmd-command_3","text":"vlmd --filepath data/example_pyreadstat_output.dta --inputtype dta","title":"Run the vlmd command"},{"location":"vlmd/supported_input_formats/#csv-datasets","text":"CSV (comma-separated values) is the main open tabular data format for storage and exchange. It is easy to create and understand using basic text editors in addition to popular spreadsheet software like Google Sheets and Excel. Importantly, it is simple and can be easily integrated into web applications and just about any software. Currently, the HEAL data utilities vlmd function can infer a minimal-HEAL compliant dataset by inferring name , type ,and enum (i.e., possible values). After this minimal data dictionary is generated, the researcher can further annotate it with fields' description and other optional properties.","title":"csv Datasets"},{"location":"vlmd/supported_input_formats/#csv-heal-data-dictionary-eg-from-template","text":"HEAL data utilities can also input a csv HEAL data dictionary either from a manually filled out template or as an additional step after additional annotation (e.g., from the HEAL csv data dictionary output of the above file formats).","title":"csv HEAL data dictionary (e.g., from template)"},{"location":"vlmd/supported_input_formats/#creating-a-csv-heal-data-dictionary","text":"Use the template and start from scratch > Click here to download a csv HEAL data dictionary template. Output from one of the above formats and then further annotate. Note To further annotate the data dictionary, see the variable level metadata field properties (with examples) here.","title":"Creating a csv HEAL data dictionary"},{"location":"vlmd/supported_input_formats/#validate-with-the-vlmd-command","text":"After finishing your work on the csv HEAL data dictionary, run the vlmd command to ensure it is HEAL-compliant with: vlmd --filepath data/heal-dd-output.csv --inputtype csvtemplate","title":"Validate with the vlmd command"},{"location":"vlmd/supported_input_formats/#json-heal-data-dictionary-eg-from-template","text":"While the csv HEAL data dictionary provides a tabular format for HEAL-compliant data dictionaries, ultimately, these csv data dictionary files are converted to a json file (the most common format to store and exchange data within web applications such as the HEAL data platform). The HEAL data utilities vlmd tool can also input this json HEAL data dictionary either from a manually filled out template or as an additional step after additional annotation. Another advantage of json HEAL data dictionaries is that one can specify metadata describing the data dictionary as a whole (e.g., the description and title ).","title":"json HEAL data dictionary (e.g., from template)"},{"location":"vlmd/supported_input_formats/#creating-a-json-heal-data-dictionary","text":"Use the template and start from scratch > Click here to download a json HEAL data dictionary template. Output from one of the above formats and then further annotate. Note To further annotate the data dictionary, see the variable level metadata field properties (with examples) here.","title":"Creating a json HEAL data dictionary"},{"location":"vlmd/supported_input_formats/#validate-with-the-vlmd-command_1","text":"After finishing your work on the csv HEAL data dictionary, run the vlmd command to ensure it is HEAL-compliant with: vlmd --filepath data/heal-dd-output.json --inputtype jsontemplate","title":"Validate with the vlmd command"},{"location":"vlmd/rendered-schemas/csv-fields/","text":"CSV HEAL Variable Level Metadata Fields \u00b6 Title: HEAL Variable Level Metadata Fields Type object Required No Additional properties [Any type: allowed] Description: Variable level metadata individual fields integrated into the variable level metadata object within the HEAL platform metadata service. Note, only name and description are required. Listed at the end of the description are suggested \"priority\" levels in brackets (e.g., [ ]): 1. [Required]: Needs to be filled out to be valid. 2. [Highly recommended]: Greatly help using the data dictionary but not required. 3. [Optional, if applicable]: May only be applicable to certain fields. 4. [Autopopulated, if not filled]: These fields are intended to be autopopulated from other fields but can be filled out if desired. 5. [Experimental]: These fields are not currently used but are in development. module \u00b6 Title: Module Type string Required No Description: The section, form, survey instrument, set of measures or other broad category used to group variables. Examples: \"Demographics\" \"PROMIS\" \"Substance use\" \"Medical History\" \"Sleep questions\" \"Physical activity\" name \u00b6 Title: Variable Name Type string Required Yes Description: The name of a variable (i.e., field) as it appears in the data. [Required] title \u00b6 Title: Variable Label (ie Title) Type string Required No Description: The human-readable title or label of the variable. [Highly recommended] Example: \"My Variable (for name of my_variable)\" description \u00b6 Title: Variable Description Type string Required Yes Description: An extended description of the variable. This could be the definition of a variable or the question text (e.g., if a survey). [Required] Examples: \"Definition\" \"Question text (if a survey)\" type \u00b6 Title: Variable Type Type enum (of string) Required No Description: The data type of the variable. This categorization allows the researcher to know what operations can be performed with the variable (i.e., statistical test) in addition to telling the computer how to effectively store these data. [Highly recommended] Examples: { \"number\" : \"A numeric value with optional decimal places. (e.g., 3.14)\" } { \"integer\" : \"A whole number without decimal places. (e.g., 42)\" } { \"string\" : \"A sequence of characters. (e.g., \\\"test\\\")\" } { \"any\" : \"Any type of data is allowed. (e.g., true)\" } { \"boolean\" : \"A binary value representing true or false. (e.g., true)\" } { \"date\" : \"A specific calendar date. (e.g., \\\"2023-05-25\\\")\" } { \"datetime\" : \"A specific date and time, including timezone information. (e.g., \\\"2023-05-25T10:30:00Z\\\")\" } { \"time\" : \"A specific time of day. (e.g., \\\"10:30:00\\\")\" } { \"year\" : \"A specific year. (e.g., 2023)\" } { \"yearmonth\" : \"A specific year and month. (e.g., \\\"2023-05\\\")\" } { \"duration\" : \"A length of time. (e.g., \\\"PT1H\\\")\" } { \"geopoint\" : \"A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278])\" } Must be one of: * \"number\" * \"integer\" * \"string\" * \"any\" * \"boolean\" * \"date\" * \"datetime\" * \"time\" * \"year\" * \"yearmonth\" * \"duration\" * \"geopoint\" format \u00b6 Title: Frictionless Formats Type combining Required No Additional properties [Any type: allowed] Description: A format taken from one of the frictionless specification schemas. For example, for tabular data, there is the Table Schema specification Property String Format \u00b6 Title: String Format Type enum (of string) Required No Must be one of: * \"uri\" * \"email\" * \"binary\" * \"uuid\" Property Date Format \u00b6 Title: Date Format Type object Required No Additional properties [Any type: allowed] Description: A format for a date variable ( date , time , datetime ). * default : An ISO8601 format string. * any : Any parsable representation of a date/time/datetime. The implementing library can attempt to parse the datetime via a range of strategies. * {PATTERN} : The value can be parsed according to {PATTERN} , which MUST follow the date formatting syntax of C / Python strftime . Examples: \"`%Y-%m-%d` (for date, e.g., 2023-05-25)\" \"`%Y%-%d` (for date, e.g., 20230525) for date without dashes\" \"`%Y-%m-%dT%H:%M:%S` (for datetime, e.g., 2023-05-25T10:30:45)\" \"`%Y-%m-%dT%H:%M:%SZ` (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)\" \"`%Y-%m-%dT%H:%M:%S%z` (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)\" \"`%Y-%m-%dT%H:%M` (for datetime without seconds, e.g., 2023-05-25T10:30)\" \"`%Y-%m-%dT%H` (for datetime without minutes and seconds, e.g., 2023-05-25T10)\" \"`%H:%M:%S` (for time, e.g., 10:30:45)\" \"`%H:%M:%SZ` (for time with UTC timezone, e.g., 10:30:45Z)\" \"`%H:%M:%S%z` (for time with timezone offset, e.g., 10:30:45+0300)\" Property Geopoint Format \u00b6 Title: Geopoint Format Type combining Required No Additional properties [Any type: allowed] Description: The two types of formats for geopoint (describing a geographic point). Property item 0 \u00b6 Type array Required No Description: A JSON array or a string parsable as a JSON array where each item is a number with the first as the latitude and the second as longitude. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A Property item 1 \u00b6 Type object Required No Additional properties [Any type: allowed] Description: Contains latitude and longitude with two keys (\"lat\" and \"long\") with number items mapped to each key. Property item 3 \u00b6 Type enum (of string) Required No Description: The JSON object according to the geojson spec. Must be one of: * \"topojson\" * \"default\" constraints.maxLength \u00b6 Title: Maximum Length Type integer Required No Description: Indicates the maximum length of an iterable (e.g., array, string, or object). For example, if 'Hello World' is the longest value of a categorical variable, this would be a maxLength of 11. [Optional,if applicable] constraints.enum \u00b6 Title: Variable Possible Values Type string Required No Description: Constrains possible values to a set of values. [Optional,if applicable] Restrictions Must match regular expression ^(?:[^\\|]+\\\\|\\|[^\\|]*)(?:[^\\|]*\\\\|)*[^\\|]*$ Test constraints.pattern \u00b6 Title: Regular Expression Pattern Type string Required No Description: A regular expression pattern the data MUST conform to. [Optional,if applicable] constraints.maximum \u00b6 Title: Maximum Value Type integer Required No Description: Specifies the maximum value of a field (e.g., maximum -- or most recent -- date, maximum integer etc). Note, this is different then maxLength property. [Optional,if applicable] encodings \u00b6 Title: Variable Value Encodings (i.e., mappings; value labels) Type string Required No Description: Variable value encodings provide a way to further annotate any value within a any variable type, making values easier to understand. Many analytic software programs (e.g., SPSS,Stata, and SAS) use numerical encodings and some algorithms only support numerical values. Encodings (and mappings) allow categorical values to be stored as numerical values. Additionally, as another use case, this field provides a way to store categoricals that are stored as \"short\" labels (such as abbreviations). [Optional,if applicable] Examples: \"0=No|1=Yes\" \"HW=Hello world|GBW=Good bye world|HM=Hi,Mike\" Restrictions Must match regular expression ^(?:.*?=.*?(?:\\\\|\\|$))+$ Test ordered \u00b6 Title: An ordered variable Type boolean Required No Description: Indicates whether a categorical variable is ordered. This variable is relevant for variables that have an ordered relationship but not necessarily a numerical relationship (e.g., Strongly disagree < Disagree < Neutral < Agree). [Optional,if applicable] missingValues \u00b6 Title: Missing Values Type string Required No Description: A list of missing values specific to a variable. [Optional, if applicable] Restrictions Must match regular expression ^(?:[^\\|]+\\\\|\\|[^\\|]*)(?:[^\\|]*\\\\|)*[^\\|]*$ Test trueValues \u00b6 Type string Required No Description: For boolean (true) variable (as defined in type field), this field allows a physical string representation to be cast as true (increasing readability of the field). It can include one or more values. [Optional, if applicable] Examples: \"Required|REQUIRED\" \"required|Yes|Y|Checked\" \"Checked\" \"Required\" Restrictions Must match regular expression ^(?:[^\\|]+\\\\|\\|[^\\|]*)(?:[^\\|]*\\\\|)*[^\\|]*$ Test falseValues \u00b6 Title: Boolean False Value Labels Type string Required No Description: For boolean (false) variable (as defined in type field), this field allows a physical string representation to be cast as false (increasing readability of the field) that is not a standard false value. It can include one or more values. Restrictions Must match regular expression ^(?:[^\\|]+\\\\|\\|[^\\|]*)(?:[^\\|]*\\\\|)*[^\\|]*$ Test repo_link \u00b6 Title: Variable Repository Link Type string Required No Description: A link to the variable as it exists on the home repository, if applicable cde_id.source \u00b6 Type string Required No cde_id.id \u00b6 Type string Required No ontology_id.relation \u00b6 Type string Required No ontology_id.source \u00b6 Type string Required No ontology_id.id \u00b6 Type string Required No standardsMappings.type \u00b6 Title: Standards Mapping - Title Type string Required No Description: The type of mapping linked to a published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Examples: \"cde\" \"ontology\" \"reference_list\" standardsMappings.label \u00b6 Title: Standards Mapping - Label Type string Required No Description: A free text label of a mapping indicating a mapping(s) to a published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Examples: \"substance use\" \"chemical compound\" \"promis\" standardsMappings.url \u00b6 Title: Standards Mapping - Url Type string Required No Format uri Description: The url that links out to the published, standardized mapping. [Autopopulated, if not filled] Example: \"https://cde.nlm.nih.gov/deView?tinyId=XyuSGdTTI\" standardsMappings.source \u00b6 Title: Standard Mapping - Source Type string Required No Description: The source of the standardized variable. Example: \"TBD (will have controlled vocabulary)\" standardsMappings.id \u00b6 Title: Standard Mapping - Id Type string Required No Description: The id locating the individual mapping within the given source. relatedConcepts.type \u00b6 Title: Related concepts - Type Type string Required No Description: The type of mapping to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled] relatedConcepts.label \u00b6 Title: Related Concepts - Label Type string Required No Description: A free text label of mapping to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled] relatedConcepts.url \u00b6 Title: Related Concepts - Url Type string Required No Format uri Description: The url that links out to the published, standardized concept. [Autopopulated, if not filled] Example: \"https://cde.nlm.nih.gov/deView?tinyId=XyuSGdTTI\" relatedConcepts.source \u00b6 Title: Related Concepts - Source Type string Required No Description: The source of the related concept. [Autopopulated, if not filled] Example: \"TBD (will have controlled vocabulary)\" relatedConcepts.id \u00b6 Title: Related Concepts - Id Type string Required No Description: The id locating the individual mapping within the given source. [Autopopulated, if not filled] univarStats.median \u00b6 Type number Required No univarStats.mean \u00b6 Type number Required No univarStats.std \u00b6 Type number Required No univarStats.min \u00b6 Type number Required No univarStats.max \u00b6 Type number Required No univarStats.mode \u00b6 Type number Required No univarStats.count \u00b6 Type integer Required No Restrictions Minimum \u2265 0 univarStats.twentyFifthPercentile \u00b6 Type number Required No univarStats.seventyFifthPercentile \u00b6 Type number Required No univarStats.categoricalMarginals.name \u00b6 Type string Required No univarStats.categoricalMarginals.count \u00b6 Type integer Required No Generated using json-schema-for-humans","title":"CSV Data dictionary"},{"location":"vlmd/rendered-schemas/csv-fields/#csv-heal-variable-level-metadata-fields","text":"Title: HEAL Variable Level Metadata Fields Type object Required No Additional properties [Any type: allowed] Description: Variable level metadata individual fields integrated into the variable level metadata object within the HEAL platform metadata service. Note, only name and description are required. Listed at the end of the description are suggested \"priority\" levels in brackets (e.g., [ ]): 1. [Required]: Needs to be filled out to be valid. 2. [Highly recommended]: Greatly help using the data dictionary but not required. 3. [Optional, if applicable]: May only be applicable to certain fields. 4. [Autopopulated, if not filled]: These fields are intended to be autopopulated from other fields but can be filled out if desired. 5. [Experimental]: These fields are not currently used but are in development.","title":"CSV HEAL Variable Level Metadata Fields"},{"location":"vlmd/rendered-schemas/csv-fields/#module","text":"Title: Module Type string Required No Description: The section, form, survey instrument, set of measures or other broad category used to group variables. Examples: \"Demographics\" \"PROMIS\" \"Substance use\" \"Medical History\" \"Sleep questions\" \"Physical activity\"","title":"module"},{"location":"vlmd/rendered-schemas/csv-fields/#name","text":"Title: Variable Name Type string Required Yes Description: The name of a variable (i.e., field) as it appears in the data. [Required]","title":"name"},{"location":"vlmd/rendered-schemas/csv-fields/#title","text":"Title: Variable Label (ie Title) Type string Required No Description: The human-readable title or label of the variable. [Highly recommended] Example: \"My Variable (for name of my_variable)\"","title":"title"},{"location":"vlmd/rendered-schemas/csv-fields/#description","text":"Title: Variable Description Type string Required Yes Description: An extended description of the variable. This could be the definition of a variable or the question text (e.g., if a survey). [Required] Examples: \"Definition\" \"Question text (if a survey)\"","title":"description"},{"location":"vlmd/rendered-schemas/csv-fields/#type","text":"Title: Variable Type Type enum (of string) Required No Description: The data type of the variable. This categorization allows the researcher to know what operations can be performed with the variable (i.e., statistical test) in addition to telling the computer how to effectively store these data. [Highly recommended] Examples: { \"number\" : \"A numeric value with optional decimal places. (e.g., 3.14)\" } { \"integer\" : \"A whole number without decimal places. (e.g., 42)\" } { \"string\" : \"A sequence of characters. (e.g., \\\"test\\\")\" } { \"any\" : \"Any type of data is allowed. (e.g., true)\" } { \"boolean\" : \"A binary value representing true or false. (e.g., true)\" } { \"date\" : \"A specific calendar date. (e.g., \\\"2023-05-25\\\")\" } { \"datetime\" : \"A specific date and time, including timezone information. (e.g., \\\"2023-05-25T10:30:00Z\\\")\" } { \"time\" : \"A specific time of day. (e.g., \\\"10:30:00\\\")\" } { \"year\" : \"A specific year. (e.g., 2023)\" } { \"yearmonth\" : \"A specific year and month. (e.g., \\\"2023-05\\\")\" } { \"duration\" : \"A length of time. (e.g., \\\"PT1H\\\")\" } { \"geopoint\" : \"A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278])\" } Must be one of: * \"number\" * \"integer\" * \"string\" * \"any\" * \"boolean\" * \"date\" * \"datetime\" * \"time\" * \"year\" * \"yearmonth\" * \"duration\" * \"geopoint\"","title":"type"},{"location":"vlmd/rendered-schemas/csv-fields/#format","text":"Title: Frictionless Formats Type combining Required No Additional properties [Any type: allowed] Description: A format taken from one of the frictionless specification schemas. For example, for tabular data, there is the Table Schema specification","title":"format"},{"location":"vlmd/rendered-schemas/csv-fields/#property-string-format","text":"Title: String Format Type enum (of string) Required No Must be one of: * \"uri\" * \"email\" * \"binary\" * \"uuid\"","title":"Property String Format"},{"location":"vlmd/rendered-schemas/csv-fields/#property-date-format","text":"Title: Date Format Type object Required No Additional properties [Any type: allowed] Description: A format for a date variable ( date , time , datetime ). * default : An ISO8601 format string. * any : Any parsable representation of a date/time/datetime. The implementing library can attempt to parse the datetime via a range of strategies. * {PATTERN} : The value can be parsed according to {PATTERN} , which MUST follow the date formatting syntax of C / Python strftime . Examples: \"`%Y-%m-%d` (for date, e.g., 2023-05-25)\" \"`%Y%-%d` (for date, e.g., 20230525) for date without dashes\" \"`%Y-%m-%dT%H:%M:%S` (for datetime, e.g., 2023-05-25T10:30:45)\" \"`%Y-%m-%dT%H:%M:%SZ` (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)\" \"`%Y-%m-%dT%H:%M:%S%z` (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)\" \"`%Y-%m-%dT%H:%M` (for datetime without seconds, e.g., 2023-05-25T10:30)\" \"`%Y-%m-%dT%H` (for datetime without minutes and seconds, e.g., 2023-05-25T10)\" \"`%H:%M:%S` (for time, e.g., 10:30:45)\" \"`%H:%M:%SZ` (for time with UTC timezone, e.g., 10:30:45Z)\" \"`%H:%M:%S%z` (for time with timezone offset, e.g., 10:30:45+0300)\"","title":"Property Date Format"},{"location":"vlmd/rendered-schemas/csv-fields/#property-geopoint-format","text":"Title: Geopoint Format Type combining Required No Additional properties [Any type: allowed] Description: The two types of formats for geopoint (describing a geographic point).","title":"Property Geopoint Format"},{"location":"vlmd/rendered-schemas/csv-fields/#property-item-0","text":"Type array Required No Description: A JSON array or a string parsable as a JSON array where each item is a number with the first as the latitude and the second as longitude. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A","title":"Property item 0"},{"location":"vlmd/rendered-schemas/csv-fields/#property-item-1","text":"Type object Required No Additional properties [Any type: allowed] Description: Contains latitude and longitude with two keys (\"lat\" and \"long\") with number items mapped to each key.","title":"Property item 1"},{"location":"vlmd/rendered-schemas/csv-fields/#property-item-3","text":"Type enum (of string) Required No Description: The JSON object according to the geojson spec. Must be one of: * \"topojson\" * \"default\"","title":"Property item 3"},{"location":"vlmd/rendered-schemas/csv-fields/#constraintsmaxlength","text":"Title: Maximum Length Type integer Required No Description: Indicates the maximum length of an iterable (e.g., array, string, or object). For example, if 'Hello World' is the longest value of a categorical variable, this would be a maxLength of 11. [Optional,if applicable]","title":"constraints.maxLength"},{"location":"vlmd/rendered-schemas/csv-fields/#constraintsenum","text":"Title: Variable Possible Values Type string Required No Description: Constrains possible values to a set of values. [Optional,if applicable] Restrictions Must match regular expression ^(?:[^\\|]+\\\\|\\|[^\\|]*)(?:[^\\|]*\\\\|)*[^\\|]*$ Test","title":"constraints.enum"},{"location":"vlmd/rendered-schemas/csv-fields/#constraintspattern","text":"Title: Regular Expression Pattern Type string Required No Description: A regular expression pattern the data MUST conform to. [Optional,if applicable]","title":"constraints.pattern"},{"location":"vlmd/rendered-schemas/csv-fields/#constraintsmaximum","text":"Title: Maximum Value Type integer Required No Description: Specifies the maximum value of a field (e.g., maximum -- or most recent -- date, maximum integer etc). Note, this is different then maxLength property. [Optional,if applicable]","title":"constraints.maximum"},{"location":"vlmd/rendered-schemas/csv-fields/#encodings","text":"Title: Variable Value Encodings (i.e., mappings; value labels) Type string Required No Description: Variable value encodings provide a way to further annotate any value within a any variable type, making values easier to understand. Many analytic software programs (e.g., SPSS,Stata, and SAS) use numerical encodings and some algorithms only support numerical values. Encodings (and mappings) allow categorical values to be stored as numerical values. Additionally, as another use case, this field provides a way to store categoricals that are stored as \"short\" labels (such as abbreviations). [Optional,if applicable] Examples: \"0=No|1=Yes\" \"HW=Hello world|GBW=Good bye world|HM=Hi,Mike\" Restrictions Must match regular expression ^(?:.*?=.*?(?:\\\\|\\|$))+$ Test","title":"encodings"},{"location":"vlmd/rendered-schemas/csv-fields/#ordered","text":"Title: An ordered variable Type boolean Required No Description: Indicates whether a categorical variable is ordered. This variable is relevant for variables that have an ordered relationship but not necessarily a numerical relationship (e.g., Strongly disagree < Disagree < Neutral < Agree). [Optional,if applicable]","title":"ordered"},{"location":"vlmd/rendered-schemas/csv-fields/#missingvalues","text":"Title: Missing Values Type string Required No Description: A list of missing values specific to a variable. [Optional, if applicable] Restrictions Must match regular expression ^(?:[^\\|]+\\\\|\\|[^\\|]*)(?:[^\\|]*\\\\|)*[^\\|]*$ Test","title":"missingValues"},{"location":"vlmd/rendered-schemas/csv-fields/#truevalues","text":"Type string Required No Description: For boolean (true) variable (as defined in type field), this field allows a physical string representation to be cast as true (increasing readability of the field). It can include one or more values. [Optional, if applicable] Examples: \"Required|REQUIRED\" \"required|Yes|Y|Checked\" \"Checked\" \"Required\" Restrictions Must match regular expression ^(?:[^\\|]+\\\\|\\|[^\\|]*)(?:[^\\|]*\\\\|)*[^\\|]*$ Test","title":"trueValues"},{"location":"vlmd/rendered-schemas/csv-fields/#falsevalues","text":"Title: Boolean False Value Labels Type string Required No Description: For boolean (false) variable (as defined in type field), this field allows a physical string representation to be cast as false (increasing readability of the field) that is not a standard false value. It can include one or more values. Restrictions Must match regular expression ^(?:[^\\|]+\\\\|\\|[^\\|]*)(?:[^\\|]*\\\\|)*[^\\|]*$ Test","title":"falseValues"},{"location":"vlmd/rendered-schemas/csv-fields/#repo_link","text":"Title: Variable Repository Link Type string Required No Description: A link to the variable as it exists on the home repository, if applicable","title":"repo_link"},{"location":"vlmd/rendered-schemas/csv-fields/#cde_idsource","text":"Type string Required No","title":"cde_id.source"},{"location":"vlmd/rendered-schemas/csv-fields/#cde_idid","text":"Type string Required No","title":"cde_id.id"},{"location":"vlmd/rendered-schemas/csv-fields/#ontology_idrelation","text":"Type string Required No","title":"ontology_id.relation"},{"location":"vlmd/rendered-schemas/csv-fields/#ontology_idsource","text":"Type string Required No","title":"ontology_id.source"},{"location":"vlmd/rendered-schemas/csv-fields/#ontology_idid","text":"Type string Required No","title":"ontology_id.id"},{"location":"vlmd/rendered-schemas/csv-fields/#standardsmappingstype","text":"Title: Standards Mapping - Title Type string Required No Description: The type of mapping linked to a published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Examples: \"cde\" \"ontology\" \"reference_list\"","title":"standardsMappings.type"},{"location":"vlmd/rendered-schemas/csv-fields/#standardsmappingslabel","text":"Title: Standards Mapping - Label Type string Required No Description: A free text label of a mapping indicating a mapping(s) to a published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Examples: \"substance use\" \"chemical compound\" \"promis\"","title":"standardsMappings.label"},{"location":"vlmd/rendered-schemas/csv-fields/#standardsmappingsurl","text":"Title: Standards Mapping - Url Type string Required No Format uri Description: The url that links out to the published, standardized mapping. [Autopopulated, if not filled] Example: \"https://cde.nlm.nih.gov/deView?tinyId=XyuSGdTTI\"","title":"standardsMappings.url"},{"location":"vlmd/rendered-schemas/csv-fields/#standardsmappingssource","text":"Title: Standard Mapping - Source Type string Required No Description: The source of the standardized variable. Example: \"TBD (will have controlled vocabulary)\"","title":"standardsMappings.source"},{"location":"vlmd/rendered-schemas/csv-fields/#standardsmappingsid","text":"Title: Standard Mapping - Id Type string Required No Description: The id locating the individual mapping within the given source.","title":"standardsMappings.id"},{"location":"vlmd/rendered-schemas/csv-fields/#relatedconceptstype","text":"Title: Related concepts - Type Type string Required No Description: The type of mapping to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled]","title":"relatedConcepts.type"},{"location":"vlmd/rendered-schemas/csv-fields/#relatedconceptslabel","text":"Title: Related Concepts - Label Type string Required No Description: A free text label of mapping to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled]","title":"relatedConcepts.label"},{"location":"vlmd/rendered-schemas/csv-fields/#relatedconceptsurl","text":"Title: Related Concepts - Url Type string Required No Format uri Description: The url that links out to the published, standardized concept. [Autopopulated, if not filled] Example: \"https://cde.nlm.nih.gov/deView?tinyId=XyuSGdTTI\"","title":"relatedConcepts.url"},{"location":"vlmd/rendered-schemas/csv-fields/#relatedconceptssource","text":"Title: Related Concepts - Source Type string Required No Description: The source of the related concept. [Autopopulated, if not filled] Example: \"TBD (will have controlled vocabulary)\"","title":"relatedConcepts.source"},{"location":"vlmd/rendered-schemas/csv-fields/#relatedconceptsid","text":"Title: Related Concepts - Id Type string Required No Description: The id locating the individual mapping within the given source. [Autopopulated, if not filled]","title":"relatedConcepts.id"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatsmedian","text":"Type number Required No","title":"univarStats.median"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatsmean","text":"Type number Required No","title":"univarStats.mean"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatsstd","text":"Type number Required No","title":"univarStats.std"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatsmin","text":"Type number Required No","title":"univarStats.min"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatsmax","text":"Type number Required No","title":"univarStats.max"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatsmode","text":"Type number Required No","title":"univarStats.mode"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatscount","text":"Type integer Required No Restrictions Minimum \u2265 0","title":"univarStats.count"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatstwentyfifthpercentile","text":"Type number Required No","title":"univarStats.twentyFifthPercentile"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatsseventyfifthpercentile","text":"Type number Required No","title":"univarStats.seventyFifthPercentile"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatscategoricalmarginalsname","text":"Type string Required No","title":"univarStats.categoricalMarginals.name"},{"location":"vlmd/rendered-schemas/csv-fields/#univarstatscategoricalmarginalscount","text":"Type integer Required No Generated using json-schema-for-humans","title":"univarStats.categoricalMarginals.count"},{"location":"vlmd/rendered-schemas/json-fields/","text":"JSON HEAL Variable Level Metadata Fields \u00b6 Title: HEAL Variable Level Metadata Fields Type object Required No Additional properties [Any type: allowed] Description: Variable level metadata individual fields integrated into the variable level metadata object within the HEAL platform metadata service. Note, only name and description are required. Listed at the end of the description are suggested \"priority\" levels in brackets (e.g., [ ]): 1. [Required]: Needs to be filled out to be valid. 2. [Highly recommended]: Greatly help using the data dictionary but not required. 3. [Optional, if applicable]: May only be applicable to certain fields. 4. [Autopopulated, if not filled]: These fields are intended to be autopopulated from other fields but can be filled out if desired. 5. [Experimental]: These fields are not currently used but are in development. module \u00b6 Title: Module Type string Required No Description: The section, form, survey instrument, set of measures or other broad category used to group variables. Examples: \"Demographics\" \"PROMIS\" \"Substance use\" \"Medical History\" \"Sleep questions\" \"Physical activity\" name \u00b6 Title: Variable Name Type string Required Yes Description: The name of a variable (i.e., field) as it appears in the data. [Required] title \u00b6 Title: Variable Label (ie Title) Type string Required No Description: The human-readable title or label of the variable. [Highly recommended] Example: \"My Variable (for name of my_variable)\" description \u00b6 Title: Variable Description Type string Required Yes Description: An extended description of the variable. This could be the definition of a variable or the question text (e.g., if a survey). [Required] Examples: \"Definition\" \"Question text (if a survey)\" type \u00b6 Title: Variable Type Type enum (of string) Required No Description: The data type of the variable. This categorization allows the researcher to know what operations can be performed with the variable (i.e., statistical test) in addition to telling the computer how to effectively store these data. [Highly recommended] Examples: { \"number\" : \"A numeric value with optional decimal places. (e.g., 3.14)\" } { \"integer\" : \"A whole number without decimal places. (e.g., 42)\" } { \"string\" : \"A sequence of characters. (e.g., \\\"test\\\")\" } { \"any\" : \"Any type of data is allowed. (e.g., true)\" } { \"boolean\" : \"A binary value representing true or false. (e.g., true)\" } { \"date\" : \"A specific calendar date. (e.g., \\\"2023-05-25\\\")\" } { \"datetime\" : \"A specific date and time, including timezone information. (e.g., \\\"2023-05-25T10:30:00Z\\\")\" } { \"time\" : \"A specific time of day. (e.g., \\\"10:30:00\\\")\" } { \"year\" : \"A specific year. (e.g., 2023)\" } { \"yearmonth\" : \"A specific year and month. (e.g., \\\"2023-05\\\")\" } { \"duration\" : \"A length of time. (e.g., \\\"PT1H\\\")\" } { \"geopoint\" : \"A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278])\" } Must be one of: * \"number\" * \"integer\" * \"string\" * \"any\" * \"boolean\" * \"date\" * \"datetime\" * \"time\" * \"year\" * \"yearmonth\" * \"duration\" * \"geopoint\" format \u00b6 Title: Frictionless Formats Type combining Required No Additional properties [Any type: allowed] Description: A format taken from one of the frictionless specification schemas. For example, for tabular data, there is the Table Schema specification Property String Format \u00b6 Title: String Format Type enum (of string) Required No Must be one of: * \"uri\" * \"email\" * \"binary\" * \"uuid\" Property Date Format \u00b6 Title: Date Format Type object Required No Additional properties [Any type: allowed] Description: A format for a date variable ( date , time , datetime ). * default : An ISO8601 format string. * any : Any parsable representation of a date/time/datetime. The implementing library can attempt to parse the datetime via a range of strategies. * {PATTERN} : The value can be parsed according to {PATTERN} , which MUST follow the date formatting syntax of C / Python strftime . Examples: \"`%Y-%m-%d` (for date, e.g., 2023-05-25)\" \"`%Y%-%d` (for date, e.g., 20230525) for date without dashes\" \"`%Y-%m-%dT%H:%M:%S` (for datetime, e.g., 2023-05-25T10:30:45)\" \"`%Y-%m-%dT%H:%M:%SZ` (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)\" \"`%Y-%m-%dT%H:%M:%S%z` (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)\" \"`%Y-%m-%dT%H:%M` (for datetime without seconds, e.g., 2023-05-25T10:30)\" \"`%Y-%m-%dT%H` (for datetime without minutes and seconds, e.g., 2023-05-25T10)\" \"`%H:%M:%S` (for time, e.g., 10:30:45)\" \"`%H:%M:%SZ` (for time with UTC timezone, e.g., 10:30:45Z)\" \"`%H:%M:%S%z` (for time with timezone offset, e.g., 10:30:45+0300)\" Property Geopoint Format \u00b6 Title: Geopoint Format Type combining Required No Additional properties [Any type: allowed] Description: The two types of formats for geopoint (describing a geographic point). Property item 0 \u00b6 Type array Required No Description: A JSON array or a string parsable as a JSON array where each item is a number with the first as the latitude and the second as longitude. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A Property item 1 \u00b6 Type object Required No Additional properties [Any type: allowed] Description: Contains latitude and longitude with two keys (\"lat\" and \"long\") with number items mapped to each key. Property item 3 \u00b6 Type enum (of string) Required No Description: The JSON object according to the geojson spec. Must be one of: * \"topojson\" * \"default\" constraints \u00b6 Type object Required No Additional properties [Any type: allowed] maxLength \u00b6 Title: Maximum Length Type integer Required No Description: Indicates the maximum length of an iterable (e.g., array, string, or object). For example, if 'Hello World' is the longest value of a categorical variable, this would be a maxLength of 11. [Optional,if applicable] enum \u00b6 Title: Variable Possible Values Type array Required No Description: Constrains possible values to a set of values. [Optional,if applicable] Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A pattern \u00b6 Title: Regular Expression Pattern Type string Required No Description: A regular expression pattern the data MUST conform to. [Optional,if applicable] maximum \u00b6 Title: Maximum Value Type integer Required No Description: Specifies the maximum value of a field (e.g., maximum -- or most recent -- date, maximum integer etc). Note, this is different then maxLength property. [Optional,if applicable] encodings \u00b6 Title: Variable Value Encodings (i.e., mappings; value labels) Type object Required No Additional properties [Any type: allowed] Description: Variable value encodings provide a way to further annotate any value within a any variable type, making values easier to understand. Many analytic software programs (e.g., SPSS,Stata, and SAS) use numerical encodings and some algorithms only support numerical values. Encodings (and mappings) allow categorical values to be stored as numerical values. Additionally, as another use case, this field provides a way to store categoricals that are stored as \"short\" labels (such as abbreviations). [Optional,if applicable] Examples: { \"0\" : \"No\" , \"1\" : \"Yes\" } { \"HW\" : \"Hello world\" , \"GBW\" : \"Good bye world\" , \"HM\" : \"Hi, Mike\" } ordered \u00b6 Title: An ordered variable Type boolean Required No Description: Indicates whether a categorical variable is ordered. This variable is relevant for variables that have an ordered relationship but not necessarily a numerical relationship (e.g., Strongly disagree < Disagree < Neutral < Agree). [Optional,if applicable] missingValues \u00b6 Title: Missing Values Type array Required No Description: A list of missing values specific to a variable. [Highly recommended] Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A trueValues \u00b6 Title: Boolean True Value Labels Type array of string Required No Description: For boolean (true) variable (as defined in type field), this field allows a physical string representation to be cast as true (increasing readability of the field). It can include one or more values. [Optional, if applicable] Examples: \"Required\" \"REQUIRED\" \"required\" \"Yes\" \"Checked\\\"\" Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description trueValues items - trueValues items \u00b6 Type string Required No falseValues \u00b6 Title: Boolean False Value Labels Type array Required No Description: For boolean (false) variable (as defined in type field), this field allows a physical string representation to be cast as false (increasing readability of the field) that is not a standard false value. It can include one or more values. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A repo_link \u00b6 Title: Variable Repository Link Type string Required No Description: A link to the variable as it exists on the home repository, if applicable cde_id \u00b6 Title: Common Data Element Id Type array of object Required No Description: [FUTURE WARNING: WILL BE DEPRECATED] Use standardsMapping . The source and id for the NIH Common Data Elements program. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description cde_id items - cde_id items \u00b6 Type object Required No Additional properties [Any type: allowed] source \u00b6 Type string Required No id \u00b6 Type string Required No ontology_id \u00b6 Title: Ontology ID Type array of object Required No Description: [FUTURE WARNING: WILL BE DEPRECATED] - Use relatedConcepts . Ontological information for the given variable as indicated by the source, id, and relation to the specified classification. One or more ontology classifications can be specified. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description ontology_id items - ontology_id items \u00b6 Type object Required No Additional properties [Any type: allowed] relation \u00b6 Type string Required No source \u00b6 Type string Required No id \u00b6 Type string Required No standardsMappings \u00b6 Title: Standards Mappings Type array of object Required No Description: A published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description standardsMappings items - standardsMappings items \u00b6 Type object Required No Additional properties [Any type: allowed] type \u00b6 Title: Standards Mapping - Title Type string Required No Description: The type of mapping linked to a published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Examples: \"cde\" \"ontology\" \"reference_list\" label \u00b6 Title: Standards Mapping - Label Type string Required No Description: A free text label of a mapping indicating a mapping(s) to a published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Examples: \"substance use\" \"chemical compound\" \"promis\" url \u00b6 Title: Standards Mapping - Url Type string Required No Format uri Description: The url that links out to the published, standardized mapping. [Autopopulated, if not filled] Example: \"https://cde.nlm.nih.gov/deView?tinyId=XyuSGdTTI\" source \u00b6 Title: Standard Mapping - Source Type string Required No Description: The source of the standardized variable. Example: \"TBD (will have controlled vocabulary)\" id \u00b6 Title: Standard Mapping - Id Type string Required No Description: The id locating the individual mapping within the given source. relatedConcepts \u00b6 Title: Related Concepts Type array of object Required No Description: Mappings to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled] Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description relatedConcepts items - relatedConcepts items \u00b6 Type object Required No Additional properties [Any type: allowed] type \u00b6 Title: Related concepts - Type Type string Required No Description: The type of mapping to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled] label \u00b6 Title: Related Concepts - Label Type string Required No Description: A free text label of mapping to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled] url \u00b6 Title: Related Concepts - Url Type string Required No Format uri Description: The url that links out to the published, standardized concept. [Autopopulated, if not filled] Example: \"https://cde.nlm.nih.gov/deView?tinyId=XyuSGdTTI\" source \u00b6 Title: Related Concepts - Source Type string Required No Description: The source of the related concept. [Autopopulated, if not filled] Example: \"TBD (will have controlled vocabulary)\" id \u00b6 Title: Related Concepts - Id Type string Required No Description: The id locating the individual mapping within the given source. [Autopopulated, if not filled] univarStats \u00b6 Type object Required No Additional properties [Any type: allowed] Description: Univariate statistics inferred from the data about the given variable [Experimental] median \u00b6 Type number Required No mean \u00b6 Type number Required No std \u00b6 Type number Required No min \u00b6 Type number Required No max \u00b6 Type number Required No mode \u00b6 Type number Required No count \u00b6 Type integer Required No Restrictions Minimum \u2265 0 twentyFifthPercentile \u00b6 Type number Required No seventyFifthPercentile \u00b6 Type number Required No categoricalMarginals \u00b6 Type array of object Required No Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description categoricalMarginals items - categoricalMarginals items \u00b6 Type object Required No Additional properties [Any type: allowed] name \u00b6 Type string Required No count \u00b6 Type integer Required No Generated using json-schema-for-humans","title":"JSON Data dictionary"},{"location":"vlmd/rendered-schemas/json-fields/#json-heal-variable-level-metadata-fields","text":"Title: HEAL Variable Level Metadata Fields Type object Required No Additional properties [Any type: allowed] Description: Variable level metadata individual fields integrated into the variable level metadata object within the HEAL platform metadata service. Note, only name and description are required. Listed at the end of the description are suggested \"priority\" levels in brackets (e.g., [ ]): 1. [Required]: Needs to be filled out to be valid. 2. [Highly recommended]: Greatly help using the data dictionary but not required. 3. [Optional, if applicable]: May only be applicable to certain fields. 4. [Autopopulated, if not filled]: These fields are intended to be autopopulated from other fields but can be filled out if desired. 5. [Experimental]: These fields are not currently used but are in development.","title":"JSON HEAL Variable Level Metadata Fields"},{"location":"vlmd/rendered-schemas/json-fields/#module","text":"Title: Module Type string Required No Description: The section, form, survey instrument, set of measures or other broad category used to group variables. Examples: \"Demographics\" \"PROMIS\" \"Substance use\" \"Medical History\" \"Sleep questions\" \"Physical activity\"","title":"module"},{"location":"vlmd/rendered-schemas/json-fields/#name","text":"Title: Variable Name Type string Required Yes Description: The name of a variable (i.e., field) as it appears in the data. [Required]","title":"name"},{"location":"vlmd/rendered-schemas/json-fields/#title","text":"Title: Variable Label (ie Title) Type string Required No Description: The human-readable title or label of the variable. [Highly recommended] Example: \"My Variable (for name of my_variable)\"","title":"title"},{"location":"vlmd/rendered-schemas/json-fields/#description","text":"Title: Variable Description Type string Required Yes Description: An extended description of the variable. This could be the definition of a variable or the question text (e.g., if a survey). [Required] Examples: \"Definition\" \"Question text (if a survey)\"","title":"description"},{"location":"vlmd/rendered-schemas/json-fields/#type","text":"Title: Variable Type Type enum (of string) Required No Description: The data type of the variable. This categorization allows the researcher to know what operations can be performed with the variable (i.e., statistical test) in addition to telling the computer how to effectively store these data. [Highly recommended] Examples: { \"number\" : \"A numeric value with optional decimal places. (e.g., 3.14)\" } { \"integer\" : \"A whole number without decimal places. (e.g., 42)\" } { \"string\" : \"A sequence of characters. (e.g., \\\"test\\\")\" } { \"any\" : \"Any type of data is allowed. (e.g., true)\" } { \"boolean\" : \"A binary value representing true or false. (e.g., true)\" } { \"date\" : \"A specific calendar date. (e.g., \\\"2023-05-25\\\")\" } { \"datetime\" : \"A specific date and time, including timezone information. (e.g., \\\"2023-05-25T10:30:00Z\\\")\" } { \"time\" : \"A specific time of day. (e.g., \\\"10:30:00\\\")\" } { \"year\" : \"A specific year. (e.g., 2023)\" } { \"yearmonth\" : \"A specific year and month. (e.g., \\\"2023-05\\\")\" } { \"duration\" : \"A length of time. (e.g., \\\"PT1H\\\")\" } { \"geopoint\" : \"A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278])\" } Must be one of: * \"number\" * \"integer\" * \"string\" * \"any\" * \"boolean\" * \"date\" * \"datetime\" * \"time\" * \"year\" * \"yearmonth\" * \"duration\" * \"geopoint\"","title":"type"},{"location":"vlmd/rendered-schemas/json-fields/#format","text":"Title: Frictionless Formats Type combining Required No Additional properties [Any type: allowed] Description: A format taken from one of the frictionless specification schemas. For example, for tabular data, there is the Table Schema specification","title":"format"},{"location":"vlmd/rendered-schemas/json-fields/#property-string-format","text":"Title: String Format Type enum (of string) Required No Must be one of: * \"uri\" * \"email\" * \"binary\" * \"uuid\"","title":"Property String Format"},{"location":"vlmd/rendered-schemas/json-fields/#property-date-format","text":"Title: Date Format Type object Required No Additional properties [Any type: allowed] Description: A format for a date variable ( date , time , datetime ). * default : An ISO8601 format string. * any : Any parsable representation of a date/time/datetime. The implementing library can attempt to parse the datetime via a range of strategies. * {PATTERN} : The value can be parsed according to {PATTERN} , which MUST follow the date formatting syntax of C / Python strftime . Examples: \"`%Y-%m-%d` (for date, e.g., 2023-05-25)\" \"`%Y%-%d` (for date, e.g., 20230525) for date without dashes\" \"`%Y-%m-%dT%H:%M:%S` (for datetime, e.g., 2023-05-25T10:30:45)\" \"`%Y-%m-%dT%H:%M:%SZ` (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)\" \"`%Y-%m-%dT%H:%M:%S%z` (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)\" \"`%Y-%m-%dT%H:%M` (for datetime without seconds, e.g., 2023-05-25T10:30)\" \"`%Y-%m-%dT%H` (for datetime without minutes and seconds, e.g., 2023-05-25T10)\" \"`%H:%M:%S` (for time, e.g., 10:30:45)\" \"`%H:%M:%SZ` (for time with UTC timezone, e.g., 10:30:45Z)\" \"`%H:%M:%S%z` (for time with timezone offset, e.g., 10:30:45+0300)\"","title":"Property Date Format"},{"location":"vlmd/rendered-schemas/json-fields/#property-geopoint-format","text":"Title: Geopoint Format Type combining Required No Additional properties [Any type: allowed] Description: The two types of formats for geopoint (describing a geographic point).","title":"Property Geopoint Format"},{"location":"vlmd/rendered-schemas/json-fields/#property-item-0","text":"Type array Required No Description: A JSON array or a string parsable as a JSON array where each item is a number with the first as the latitude and the second as longitude. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A","title":"Property item 0"},{"location":"vlmd/rendered-schemas/json-fields/#property-item-1","text":"Type object Required No Additional properties [Any type: allowed] Description: Contains latitude and longitude with two keys (\"lat\" and \"long\") with number items mapped to each key.","title":"Property item 1"},{"location":"vlmd/rendered-schemas/json-fields/#property-item-3","text":"Type enum (of string) Required No Description: The JSON object according to the geojson spec. Must be one of: * \"topojson\" * \"default\"","title":"Property item 3"},{"location":"vlmd/rendered-schemas/json-fields/#constraints","text":"Type object Required No Additional properties [Any type: allowed]","title":"constraints"},{"location":"vlmd/rendered-schemas/json-fields/#maxlength","text":"Title: Maximum Length Type integer Required No Description: Indicates the maximum length of an iterable (e.g., array, string, or object). For example, if 'Hello World' is the longest value of a categorical variable, this would be a maxLength of 11. [Optional,if applicable]","title":"maxLength"},{"location":"vlmd/rendered-schemas/json-fields/#enum","text":"Title: Variable Possible Values Type array Required No Description: Constrains possible values to a set of values. [Optional,if applicable] Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A","title":"enum"},{"location":"vlmd/rendered-schemas/json-fields/#pattern","text":"Title: Regular Expression Pattern Type string Required No Description: A regular expression pattern the data MUST conform to. [Optional,if applicable]","title":"pattern"},{"location":"vlmd/rendered-schemas/json-fields/#maximum","text":"Title: Maximum Value Type integer Required No Description: Specifies the maximum value of a field (e.g., maximum -- or most recent -- date, maximum integer etc). Note, this is different then maxLength property. [Optional,if applicable]","title":"maximum"},{"location":"vlmd/rendered-schemas/json-fields/#encodings","text":"Title: Variable Value Encodings (i.e., mappings; value labels) Type object Required No Additional properties [Any type: allowed] Description: Variable value encodings provide a way to further annotate any value within a any variable type, making values easier to understand. Many analytic software programs (e.g., SPSS,Stata, and SAS) use numerical encodings and some algorithms only support numerical values. Encodings (and mappings) allow categorical values to be stored as numerical values. Additionally, as another use case, this field provides a way to store categoricals that are stored as \"short\" labels (such as abbreviations). [Optional,if applicable] Examples: { \"0\" : \"No\" , \"1\" : \"Yes\" } { \"HW\" : \"Hello world\" , \"GBW\" : \"Good bye world\" , \"HM\" : \"Hi, Mike\" }","title":"encodings"},{"location":"vlmd/rendered-schemas/json-fields/#ordered","text":"Title: An ordered variable Type boolean Required No Description: Indicates whether a categorical variable is ordered. This variable is relevant for variables that have an ordered relationship but not necessarily a numerical relationship (e.g., Strongly disagree < Disagree < Neutral < Agree). [Optional,if applicable]","title":"ordered"},{"location":"vlmd/rendered-schemas/json-fields/#missingvalues","text":"Title: Missing Values Type array Required No Description: A list of missing values specific to a variable. [Highly recommended] Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A","title":"missingValues"},{"location":"vlmd/rendered-schemas/json-fields/#truevalues","text":"Title: Boolean True Value Labels Type array of string Required No Description: For boolean (true) variable (as defined in type field), this field allows a physical string representation to be cast as true (increasing readability of the field). It can include one or more values. [Optional, if applicable] Examples: \"Required\" \"REQUIRED\" \"required\" \"Yes\" \"Checked\\\"\" Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description trueValues items -","title":"trueValues"},{"location":"vlmd/rendered-schemas/json-fields/#truevalues-items","text":"Type string Required No","title":"trueValues items"},{"location":"vlmd/rendered-schemas/json-fields/#falsevalues","text":"Title: Boolean False Value Labels Type array Required No Description: For boolean (false) variable (as defined in type field), this field allows a physical string representation to be cast as false (increasing readability of the field) that is not a standard false value. It can include one or more values. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation N/A","title":"falseValues"},{"location":"vlmd/rendered-schemas/json-fields/#repo_link","text":"Title: Variable Repository Link Type string Required No Description: A link to the variable as it exists on the home repository, if applicable","title":"repo_link"},{"location":"vlmd/rendered-schemas/json-fields/#cde_id","text":"Title: Common Data Element Id Type array of object Required No Description: [FUTURE WARNING: WILL BE DEPRECATED] Use standardsMapping . The source and id for the NIH Common Data Elements program. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description cde_id items -","title":"cde_id"},{"location":"vlmd/rendered-schemas/json-fields/#cde_id-items","text":"Type object Required No Additional properties [Any type: allowed]","title":"cde_id items"},{"location":"vlmd/rendered-schemas/json-fields/#source","text":"Type string Required No","title":"source"},{"location":"vlmd/rendered-schemas/json-fields/#id","text":"Type string Required No","title":"id"},{"location":"vlmd/rendered-schemas/json-fields/#ontology_id","text":"Title: Ontology ID Type array of object Required No Description: [FUTURE WARNING: WILL BE DEPRECATED] - Use relatedConcepts . Ontological information for the given variable as indicated by the source, id, and relation to the specified classification. One or more ontology classifications can be specified. Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description ontology_id items -","title":"ontology_id"},{"location":"vlmd/rendered-schemas/json-fields/#ontology_id-items","text":"Type object Required No Additional properties [Any type: allowed]","title":"ontology_id items"},{"location":"vlmd/rendered-schemas/json-fields/#relation","text":"Type string Required No","title":"relation"},{"location":"vlmd/rendered-schemas/json-fields/#source_1","text":"Type string Required No","title":"source"},{"location":"vlmd/rendered-schemas/json-fields/#id_1","text":"Type string Required No","title":"id"},{"location":"vlmd/rendered-schemas/json-fields/#standardsmappings","text":"Title: Standards Mappings Type array of object Required No Description: A published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description standardsMappings items -","title":"standardsMappings"},{"location":"vlmd/rendered-schemas/json-fields/#standardsmappings-items","text":"Type object Required No Additional properties [Any type: allowed]","title":"standardsMappings items"},{"location":"vlmd/rendered-schemas/json-fields/#type_1","text":"Title: Standards Mapping - Title Type string Required No Description: The type of mapping linked to a published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Examples: \"cde\" \"ontology\" \"reference_list\"","title":"type"},{"location":"vlmd/rendered-schemas/json-fields/#label","text":"Title: Standards Mapping - Label Type string Required No Description: A free text label of a mapping indicating a mapping(s) to a published set of standard variables such as the NIH Common Data Elements program. [Autopopulated, if not filled] Examples: \"substance use\" \"chemical compound\" \"promis\"","title":"label"},{"location":"vlmd/rendered-schemas/json-fields/#url","text":"Title: Standards Mapping - Url Type string Required No Format uri Description: The url that links out to the published, standardized mapping. [Autopopulated, if not filled] Example: \"https://cde.nlm.nih.gov/deView?tinyId=XyuSGdTTI\"","title":"url"},{"location":"vlmd/rendered-schemas/json-fields/#source_2","text":"Title: Standard Mapping - Source Type string Required No Description: The source of the standardized variable. Example: \"TBD (will have controlled vocabulary)\"","title":"source"},{"location":"vlmd/rendered-schemas/json-fields/#id_2","text":"Title: Standard Mapping - Id Type string Required No Description: The id locating the individual mapping within the given source.","title":"id"},{"location":"vlmd/rendered-schemas/json-fields/#relatedconcepts","text":"Title: Related Concepts Type array of object Required No Description: Mappings to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled] Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description relatedConcepts items -","title":"relatedConcepts"},{"location":"vlmd/rendered-schemas/json-fields/#relatedconcepts-items","text":"Type object Required No Additional properties [Any type: allowed]","title":"relatedConcepts items"},{"location":"vlmd/rendered-schemas/json-fields/#type_2","text":"Title: Related concepts - Type Type string Required No Description: The type of mapping to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled]","title":"type"},{"location":"vlmd/rendered-schemas/json-fields/#label_1","text":"Title: Related Concepts - Label Type string Required No Description: A free text label of mapping to a published set of concepts related to the given field such as ontological information (eg., NCI thesaurus, bioportal etc) [Autopopulated, if not filled]","title":"label"},{"location":"vlmd/rendered-schemas/json-fields/#url_1","text":"Title: Related Concepts - Url Type string Required No Format uri Description: The url that links out to the published, standardized concept. [Autopopulated, if not filled] Example: \"https://cde.nlm.nih.gov/deView?tinyId=XyuSGdTTI\"","title":"url"},{"location":"vlmd/rendered-schemas/json-fields/#source_3","text":"Title: Related Concepts - Source Type string Required No Description: The source of the related concept. [Autopopulated, if not filled] Example: \"TBD (will have controlled vocabulary)\"","title":"source"},{"location":"vlmd/rendered-schemas/json-fields/#id_3","text":"Title: Related Concepts - Id Type string Required No Description: The id locating the individual mapping within the given source. [Autopopulated, if not filled]","title":"id"},{"location":"vlmd/rendered-schemas/json-fields/#univarstats","text":"Type object Required No Additional properties [Any type: allowed] Description: Univariate statistics inferred from the data about the given variable [Experimental]","title":"univarStats"},{"location":"vlmd/rendered-schemas/json-fields/#median","text":"Type number Required No","title":"median"},{"location":"vlmd/rendered-schemas/json-fields/#mean","text":"Type number Required No","title":"mean"},{"location":"vlmd/rendered-schemas/json-fields/#std","text":"Type number Required No","title":"std"},{"location":"vlmd/rendered-schemas/json-fields/#min","text":"Type number Required No","title":"min"},{"location":"vlmd/rendered-schemas/json-fields/#max","text":"Type number Required No","title":"max"},{"location":"vlmd/rendered-schemas/json-fields/#mode","text":"Type number Required No","title":"mode"},{"location":"vlmd/rendered-schemas/json-fields/#count","text":"Type integer Required No Restrictions Minimum \u2265 0","title":"count"},{"location":"vlmd/rendered-schemas/json-fields/#twentyfifthpercentile","text":"Type number Required No","title":"twentyFifthPercentile"},{"location":"vlmd/rendered-schemas/json-fields/#seventyfifthpercentile","text":"Type number Required No","title":"seventyFifthPercentile"},{"location":"vlmd/rendered-schemas/json-fields/#categoricalmarginals","text":"Type array of object Required No Array restrictions Min items N/A Max items N/A Items unicity False Additional items False Tuple validation See below Each item of this array must be Description categoricalMarginals items -","title":"categoricalMarginals"},{"location":"vlmd/rendered-schemas/json-fields/#categoricalmarginals-items","text":"Type object Required No Additional properties [Any type: allowed]","title":"categoricalMarginals items"},{"location":"vlmd/rendered-schemas/json-fields/#name_1","text":"Type string Required No","title":"name"},{"location":"vlmd/rendered-schemas/json-fields/#count_1","text":"Type integer Required No Generated using json-schema-for-humans","title":"count"}]}