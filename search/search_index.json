{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HEAL Data Utilities","text":"<p>The HEAL Data Utilities python package provides data packaging tools for the HEAL Data Ecosystem to facilitate data discovery, sharing, and harmonization on the HEAL Platform.</p> <p>Currently, the focus of this repository is generating standardized variable level metadata (VLMD) in the form of data dictionaries. See the quick start section to get started without installing any of the prerequisites. (Click here for the Variable-level Metadata documentation section).</p> <p>However, in the future, this will be expanded for all HEAL-specific data packaging functions (e.g., study- and file-level metadata and data).</p>"},{"location":"#quick-start","title":"Quick start","text":"<p>Note</p> <p>If using the quick start option, no prerequisites are required.</p> <p>Double click on the <code>vlmd</code> (or <code>vlmd.exe</code>) executable or run the <code>vlmd</code> executable without any arguments to quickly start using this tool. This \"quick start\" will take walk you through step by step by prompting you of the various options.</p> <p>Important</p> <p>Stand alone applications for different operating systems are available here. These allow you to run the <code>vlmd</code> tool without needing to install anything else. Just (1) download (by clicking on your computer's operating system), (2) unzip, and (3) double click on the <code>vlmd</code> application icon.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":""},{"location":"#python","title":"Python","text":"<p>While the HEAL Data Utilities should be compatible with most versions of Python, you can download the latest version of Python here and install it on your local computer. We recommend installing Python version 3.10.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install the latest official release of healdata-utils, from your computer's command prompt, run:</p> <p><code>pip install healdata-utils</code></p> <p>OR for the most up-to-date unreleased version run: </p> <p><code>pip install git+https://github.com/norc-heal/healdata-utils.git</code></p> <p>Note</p> <p>Installing the unreleased version requires having <code>git</code> software installed.</p>"},{"location":"vlmd/","title":"Variable-level Metadata (Data Dictionaries)","text":""},{"location":"vlmd/#motivation","title":"Motivation","text":"<p>Variable level metadata (VLMD), in the form of standardized data dictionaries, provides an exciting opportunity:</p> <ul> <li>a way to search, understand, and compare datasets before (potentially sensitive) data is shared. </li> </ul> <p>For an example of this searchability in the context of study level metadata, see the platform's discovery page</p> <ul> <li> <p>When data is available, VLMD provides a way to validate the data as well.</p> </li> <li> <p>Supports HEAL projects and goals such as the common data elements program</p> </li> </ul>"},{"location":"vlmd/#functions","title":"Functions","text":"<p><code>extract</code>: Extract the variable level metadata from an existing file with a specific   type/format</p> <p><code>start</code>: Start a data dictionary from an empty template</p> <p><code>validate</code>: Check (validate) an existing HEAL data dictionary file to see if it follows the HEAL specifications after filling out a template or further annotation after extracting from a different format.</p> <p>Typical workflows for creating a HEAL-compliant data dictionary include:</p> <ol> <li> <p>Create your data dictionary</p> <p>(a) Run the <code>vlmd extract</code> command (or <code>convert_to_vlmd</code> if in python) to generate a HEAL-compliant data dictionary via your desired input format </p> <p>(b) Run the <code>vlmd template</code> command to start from an empty template.</p> </li> <li> <p>Add/annotate with additional information in your preferred HEAL data dictionary format (either <code>json</code> or <code>csv</code>).</p> <ul> <li>To further annotate and use the data dictionary, see the variable-level metadata field property information below:<ul> <li><code>csv</code> data dictionary</li> <li><code>json</code> data dictionary</li> </ul> </li> </ul> </li> <li> <p>Run the <code>vlmd validate</code> command  with your HEAL data dictioanry as the input to validate.</p> </li> <li> <p>Repeat (2) and (3) until you are ready to submit. Please note, currently only <code>name</code> and <code>description</code> are required.</p> </li> </ol>"},{"location":"vlmd/#definitions","title":"Definitions","text":"<p>Important</p> <p>The main difference* between the CSV and JSON definitions lies in the way the data dictionaries are structured and the additional metadata included in the JSON data dictionary.</p> <p>The CSV data dictionary is a plain tabular representation with no additional metadata, while the JSON dataset includes fields along with additional metadata in the form of a root description and title.</p> <ul> <li>for field-specific differences, see the schemas in the documentation. </li> </ul> <p>For more information on variable-level metadata properties (fields), see the <code>csv</code> field specification and <code>json</code> data dictionary specification. </p>"},{"location":"vlmd/extract/","title":"<code>Extract</code> VLMD from another data type and format","text":"<p>The healdata-utils variable-level metadata (vlmd) tool inputs a variety of different input file types and extracts HEAL-compliant data dictionaries (JSON and CSV formats). Additionally, exported validation (i.e., \"error\") reports provide the user information as to a) if the exported data dictionary is valid according to HEAL specifications and b) how to modify one's data dictionary to make it HEAL-compliant.</p> <p>Warning</p> <p>Currently the python subcommand is <code>convert_to_vlmd</code> but will be changed to <code>extract_to_vlmd</code> to be consistent with CLI. <code>extract</code> was chosen to better reflect the functionality.</p> Command Line Interface (CLI)Python <pre><code>vlmd extract --inputtype spss myproject/myfile.sav\n</code></pre> <p>Note</p> <p>To continue, it's recommended to go to the input types and formats. Also, for more details on the different flags/options, run <code>vlmd --help</code></p> <pre><code>from healdata_utils import convert_to_vlmd\n\nconvert_to_vlmd(input_filepath=\"myproject/myfile.sav\",inputtype=\"spss\")\n</code></pre> <p>Note</p> <p>To continue, it's recommended to go to the input types and formats. For a complete set of options with <code>convert_to_vlmd</code> see the docstring (if in a notebook, one can enter <code>convert_to_vlmd?</code>)</p>"},{"location":"vlmd/extract/#input-types-and-formats","title":"Input Types and Formats","text":"<p>This section provides the specific syntax for running each of the supported types for generating HEAL-compliant data dictionaries are listed. Additional instructions on how to obtain the necessary input files/software are also provided. </p> <p>Note</p> <p>To further annotate your outputted data dictionaries, see the variable-level metadata field properties (with examples) for either the <code>csv data dictionary</code> click here or the <code>json data dictionary</code> click here.</p> <p>Extract variable level metadata from your data:</p> <ul> <li>CSV datasets</li> <li>CSV (minimal) data dictionary</li> <li>SPSS datasets</li> <li>SAS datasets</li> <li>Stata datasets</li> <li>REDCap data dictionary</li> <li>Frictionless Table Schema</li> <li>Excel dataset</li> </ul>"},{"location":"vlmd/extract/#output","title":"Output","text":"<p>Both the python and command line routes will result in a JSON and CSV version of the HEAL data dictionary in the output folder along with the validation reports in the <code>errors</code> folder. See below:</p> <ul> <li><code>errors/heal-csv-errors.json</code>: outputted validation report for table in csv file against frictionless schema</li> </ul> <p>If valid, this file will contain: <pre><code>{\n    \"valid\": true,\n    \"errors\": []\n}\n</code></pre> - <code>errors/heal-json-errors.json</code>:  outputted jsonschema validation report.</p> <ul> <li>If valid, this file will contain: <pre><code>{\n    \"valid\": true,\n    \"errors\": []\n}\n</code></pre></li> </ul> <p>If no <code>outputdir</code> specified, the resulting HEAL-compliant data dictionaries will be named:</p> <ul> <li><code>heal-csvtemplate-data-dictionary.csv</code>: This is the CSV data dictionary</li> <li><code>heal-jsontemplate-data-dictionary.json</code>: This is the JSON version of the data dictionary</li> </ul>"},{"location":"vlmd/extract/csvdata/","title":"<code>csv</code> Datasets","text":"<p>CSV (comma-separated values) is the main open tabular data format for storage and exchange. It is easy to create and understand using basic text editors in addition to popular spreadsheet software like Google Sheets and Excel. Importantly, CSVs are simple and can be easily integrated into web applications and just about any software.</p> <p>Currently, the HEAL Data Utilities <code>vlmd</code> function can infer a minimal, HEAL-compliant dataset by inferring <code>name</code>, <code>type</code>, and <code>enum</code> (i.e., possible values). After this minimal data dictionary is generated, the researcher can further annotate it with fields' <code>description</code> and other optional properties in either the HEAL-compliant <code>csv</code>- or <code>json</code>-formatted data dictionary (see the HEAL data dictionary template sections below for more information).</p>"},{"location":"vlmd/extract/csvdd/","title":"<code>csv</code> (Minimal) Data Dictionary","text":"<p>A minimal data dictionary in a csv (or tsv file). For example, may have <code>name</code>, <code>type</code>, and description and then this adds the rest of the fields. </p> <p>Also maps a few common data types (such as char, character,text to 'string' and 'float' to 'number'.)</p>"},{"location":"vlmd/extract/csvdd/#run-the-vlmd-command","title":"Run the <code>vlmd</code> command","text":"CLI <pre><code>vlmd extract --inputtype csv-data-dict data/minimal-csv-dd.csv\n</code></pre>"},{"location":"vlmd/extract/exceldata/","title":"Excel (xlsx) dataset","text":"<p>Excel workbooks contain tabular data tables across named worksheets.</p> <p>Extract and infer a partially completed data dictionary from excel worksheets. The command line tool will automatically generate one data dictionary per worksheet. Working in python provides a little more flexibility as you can specify specific worksheets and if you want to combine sheets into one data dictionary (rather than one dd per sheet). </p>"},{"location":"vlmd/extract/exceldata/#run-the-vlmd-command","title":"Run the <code>vlmd</code> command","text":"PythonCLI <pre><code>vlmd extract --inputtype excel-data myexcelfile.xlsx\n</code></pre>"},{"location":"vlmd/extract/exceldata/#to-output-multiple-sheets-as-separate-data-dictionaries","title":"To output multiple sheets as separate data dictionaries","text":"<pre><code>from healdata_utils import convert_to_vlmd\n\nconvert_to_vlmd(input_filepath=\"myexcelfile.xlsx\",inputtype=\"excel-data\")\n</code></pre>"},{"location":"vlmd/extract/exceldata/#to-extract-multiple-sheets-as-one-data-dictionary","title":"To extract multiple sheets as one data dictionary","text":"<p>Note</p> <p>The parameter <code>multiple_data_dicts</code> is to specify whether multiple data dictionaries should be inferred (one per sheet). The default value is <code>True</code>. Be careful about using the <code>multiple_data_dicts=False</code>. In most instances, one sheet should correspond to one separate data table and thus have one corresponding data dictionary.  </p> <p>Note, this combines (ie concatenates all data tables) and then infers fields. This use case is when sheets are viewed as \"chunks\" of one resource/dataset. </p> <pre><code>from healdata_utils import convert_to_vlmd\n\nconvert_to_vlmd(\n    input_filepath=\"myexcelfile.xlsx\",\n    inputtype=\"excel-data\",\n    multiple_data_dicts=False\n    )\n</code></pre>"},{"location":"vlmd/extract/exceldata/#to-extract-a-subset-of-sheets-as-one-data-dictionary","title":"To extract a subset of sheets as one data dictionary","text":"<pre><code>from healdata_utils import convert_to_vlmd\n\nconvert_to_vlmd(\n    input_filepath=\"myexcelfile.xlsx\",\n    inputtype=\"excel-data\",\n    multiple_data_dicts=False,\n    sheet_name=[\"mysheet1\",\"mysheet2\"]\n    )\n</code></pre>"},{"location":"vlmd/extract/frictionlessschema/","title":"Frictionless Table Schema","text":"<p>While vlmd specifications are designed (and still being developed), to support interoperability with the heal platform, minor naming translations may be needed. This function supports any of said translations (eg., frictionless <code>fields</code> name --&gt; heal <code>data_dictionary</code>)</p> <p>Note, this conversion supports either <code>yaml</code> or <code>json</code> format (currently only tests for <code>json</code> format but should work with yaml). </p>"},{"location":"vlmd/extract/frictionlessschema/#creating-a-frictionless-table-schema","title":"Creating a frictionless table schema","text":"<p>Below are the official frictionless table schema specifications, which you will notice a high degree of overlap with the heal variable level metadata specifications.</p> <p>See here for the frictionless table schema specs</p>"},{"location":"vlmd/extract/frictionlessschema/#run-the-vlmd-command","title":"Run the <code>vlmd</code> command","text":"<pre><code>vlmd extract --inputtype frictionless data/frictionless_dataset1.frictionless.schema.json\n</code></pre>"},{"location":"vlmd/extract/redcapcsv/","title":"REDCap: Data Dictionary CSV Export","text":"<p>For users collecting data in a REDCap data management system, HEAL-compliant data dictionaries can be generated directly from REDCap exports. </p> <p>The REDCap data dictionary export serves the purpose of providing variable-level metadata in a standardized, tabular format and is generally easy to export. The HEAL data utilities leverages this user experience and standardized format to enable HEAL researchers to generate a Heal-compliant data dictionary. </p>"},{"location":"vlmd/extract/redcapcsv/#export-your-redcap-data-dictionary","title":"Export your Redcap data dictionary","text":"<p>To download a REDCap CSV export, do the following*: </p> <ol> <li>After logging in to your REDCap project page, locate the <code>Data dictionary</code> page. A link to this page may be available on the project side bar (see image below) or in the <code>Project Setup tab</code> at the top of your page.</li> </ol> <p></p> <ol> <li>After arriving at the <code>Data dictionary</code> page, click on <code>Download the current data dictionary</code> to export the dictionary (see below).</li> </ol> <p></p> <p>*there may be slight differences depending on your specific REDCap instance and version</p>"},{"location":"vlmd/extract/redcapcsv/#run-the-vlmd-command","title":"Run the <code>vlmd</code> command","text":"<pre><code>vlmd extract --inputtype redcap input/example_redcap_demo.redcap.csv \n</code></pre>"},{"location":"vlmd/extract/sas/","title":"SAS <code>sas7bdat</code> (and <code>sas7bcat</code>) files","text":"<p>To accommodate SAS users, the HEAL Data Utilities supports the binary <code>sas7bdat</code> file format, which contains the actual data values (observations/records). This file also includes variable metadata (variable <code>names</code> and variable labels/ <code>descriptions</code>).</p> <p>The HEAL Data Utilities also provides the option to include a catalog file \u2013 <code>sas7bcat</code> format - with the <code>sas7bdat</code>.  A <code>sas7bcat</code> file contains variable value labels, or <code>encodings</code>, that can be mapped onto the corresponding data from a <code>sas7bdat</code> file.</p>"},{"location":"vlmd/extract/sas/#creating-a-sas7bdat-and-a-sas7bcat-file","title":"Creating a <code>sas7bdat</code> and a <code>sas7bcat</code> file","text":"<p>Many SAS users build formats and labels into their data processing and analysis scripts. In this section, we provide syntax that can be easily copy-pasted into these existing workflows to create <code>sas7bdat</code> and <code>sas7bcat</code> files to input into the <code>vlmd</code> tool. </p> <p>This script template can be run separately or inserted directly at the end of a SAS user's workflow. </p> <p>Note</p> <p>If inserted directly, remember to delete the lines with <code>%INCLUDE</code>)</p> Template template.sas<pre><code>/*1. Read in data file without value labels and run full code. \n        Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps \n        that assign formats and variable labels which are needed for the data dictionary. You may have defined variable labels and values in separate scripts for different analyses. In order to capture all your defined variable labels and values across scripts, you will need an %INCLUDE statement for each SAS script that defines unique variable labels or value labels.*/\n\n%INCLUDE \"&lt;INSERT SAS SCRIPT HERE FILE PATH HERE&gt;\"; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/\n%INCLUDE \"&lt;INSERT SAS SCRIPT HERE FILE PATH HERE&gt;\"; /* THIS WILL RUN A SECOND SEPARATE SAS SCRIPT*/ \n\n/*2. Output the format catalog (sas7bcat) */\n/*2a. If you do not have an out directory, assign one to output the SAS catalog and data file. If you already have an out directory assigned, skip this step and replace \u201cout\u201d with your out directory libname in the flow*/\n\nlibname out \"&lt;INSERT THE DESIRED LOCATION (FILE PATH) TO YOUR SAS7BCAT AND SAS7BDAT FILES HERE&gt;\";\n\n/*2b. Output the format catalog.\n        Note: The format catalog is automatically stored in work.formats. This step copies the format file to the \n        out directory as a sas7bcat file.*/\nproc catalog cat=work.FORMATS;\n    copy out=out.FORMATS;\n    run;\n\n/*3. Output the data file (sas7bdat) */\ndata out.yourdata;\n    set &lt;INSERT THE NAME OF YOUR FINAL SAS DATASET HERE&gt;;\n    run;\n</code></pre> <p>The below SAS syntax is an example of how to use the template within your SAS workflow.</p> <p>The below sample script creates all of our variable and value labels. Your workflow may include multiple SAS scripts with multiple format statements and may include analyses and other PROC calls for data exploration,  but for demonstration purposes, this example only uses one script and focuses on defining the variable and value labels.</p> Example my_existing_sas_workflow.sas<pre><code>/*1. Read in input data */\nproc import datafile=\"myprojectfolder/input/mydata.csv\"\n    out=raw\n    dbms=csv replace;\n    getnames=yes;\nrun;\n\n/*2. Set up proc format and apply formats and variable labels in data step */\n/*Create encodings (value labels)*/\nproc format;\n    VALUE YESNO\n    0       =\"No\"\n    1       =\"Yes\"\n\n    VALUE PUBLIC\n    1='State mental health authority (SMHA)'\n    2='Other state government agency or department'\n    3='Regional/district authority or county, local, or municipal government'\n    4='Tribal government'\n    5='Indian Health Service'\n    6='Department of Veterans Affairs'\n    7='Other'\n\n    VALUE FOCUS\n    1='Mental health treatment'\n    2='Substance abuse treatment'\n    3='Mix of mental health and substance abuse treatment (neither is primary)'\n    4='General health care'\n    5='Other service focus';\n\n**Apply formats to dataset;\ndata processed;\n    set raw;\n\n    /*Assign formats*/\n    format YOUNGADULTS TREATPSYCHOTHRPY TREATTRAUMATHRPY YESNO. FOCUS FOCUS. PUBLIC PUBLIC.;\n    /*Add variable labels*/\n    label YOUNGADULTS=\"Accepts young adults (aged 18-25 years old) for Tx\"\n            TREATPSYCHOTHRPY=\"Facility offers individual psychotherapy\"\n            TREATTRAUMATHRPY=\"Facility offers trauma therapy\"\n            FOCUS=\"Primary treatment focus of facility\"\n            PUBLIC=\"Public agency or department that operates facility\";\nrun;\n</code></pre> <p>This second script called <code>my_output.sas</code> is the filled out template. Note the <code>%INCLUDE</code> function that calls <code>my_existing_sas_workflow.sas</code></p> my_output.sas<pre><code>/*1. Read in data file without value labels and run full code. \n        Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps \n        that assign formats and variable labels which are needed for the data dictionary. You may have defined variable labels and values in separate scripts for different analyses. In order to capture all your defined variable labels and values across scripts, you will need an %INCLUDE statement for each SAS script that defines unique variable labels or value labels.*/*/\n\n%INCLUDE \"myprojectfolder/my_existing_workflow.sas\"; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/\n\n/*2. Output the format catalog (sas7bcat) */\n/*2a. If you do not have an out directory, assign one to output the SAS catalog and data file.*/\nlibname out \"myprojectfolder/output\";\n\n/*2b. Output the format catalog.\n        Note: The format catalog is automatically stored in work.formats. This step copies the format file to the \n        out directory as a sas7bcat file.*/\nproc catalog cat=work.FORMATS;\n    copy out=out.FORMATS;\n    run;\n\n/*3. Output the data file (sas7bdat) to your output folder*/\ndata out.yourdata;\n    set processed;\n    run;\n</code></pre>"},{"location":"vlmd/extract/sas/#run-the-vlmd-command","title":"Run the <code>vlmd</code> command","text":"<p>After creating the necessary <code>sas7bdat</code> and <code>sas7bcat</code> files, you can then run the <code>vlmd</code> command. The tool, will automatically detect the sas7bcat file if located in the same directory as your data file. If not detected, the command will run without the sas7bcat catalog file and the <code>encodings</code> (i.e., value labels) will not be extracted from the catalog file.</p> <pre><code>vlmd extract --inputtype sas input/data.sas7bdat \n</code></pre>"},{"location":"vlmd/extract/spss/","title":"SPSS <code>.sav</code> files","text":"<p>For SPSS users, the HEAL Data Utilities generates HEAL-compliant data dictionaries from SPSS's default file format for storing datasets: a <code>SAV</code> file. It stores not only the data itself but also metadata such as variable names, variable labels, types, and value labels. The HEAL Data Utilities extracts these data and metadata to create HEAL-compliant data dictionaries.</p>"},{"location":"vlmd/extract/spss/#run-the-vlmd-command","title":"Run the <code>vlmd</code> command","text":"<pre><code>vlmd extract --inputtype spss data/example_pyreadstat_output.sav \n</code></pre>"},{"location":"vlmd/extract/stata/","title":"Stata <code>.dta</code> files","text":"<p>For Stata users, the HEAL Data Utilities generates HEAL-compliant data dictionaries through Stata's default file format: a <code>DTA</code> file. <code>DTA</code> files store not only the data itself but also metadata such as variable names, variable labels, types, and value labels.</p>"},{"location":"vlmd/extract/stata/#run-the-vlmd-command","title":"Run the <code>vlmd</code> command","text":"<pre><code>vlmd extract --inputtype stata data/mydatafile.dta \n</code></pre>"},{"location":"vlmd/schemas/","title":"HEAL data dictionary schemas","text":"<p>Click on each data dictionary schema below to view information about each format's data dictionary properties (such as a description, examples, etc).</p> <p>CSV fields</p> <p>JSON data dictionary</p> <p>Note</p> <p><code>enum</code> type means that a field can only be one of a certain set of possible values.</p>"},{"location":"vlmd/schemas/csv-fields/","title":"HEAL Variable Level Metadata Fields","text":"<p>version 0.2.0</p> <p>The aim of this HEAL metadata piece is to track and provide basic information about variables in a tabular data file (i.e. a data file with rows and columns) from your HEAL study. The objective is to list all variables and descriptive information about those variables. This will ensure that potential secondary data users know what data has been collected or calculated and how to use these data. Note that a given study can have multiple tabular data files; You should create a data dictionary for each tabular data file. Thus, a study may have multiple data dictionaries.</p> <p>Highly encouraged</p> <ul> <li>Only <code>name</code> and <code>description</code> properties are required. </li> <li>For categorical variables, <code>constraints.enum</code> and <code>enumLabels</code> (where applicable) properties are highly encouraged. </li> <li>For studies using HEAL or other common data elements (CDEs), <code>standardsMappings</code> information is highly encouraged.</li> <li><code>type</code> and <code>format</code> properties may be particularly useful for some variable types (e.g. date-like variables)</li> </ul>"},{"location":"vlmd/schemas/csv-fields/#properties-ie-fields-or-variables","title":"Properties (i.e., fields or variables)","text":"<p><code>schemaVersion</code> (string)  The version of the schema used in agreed upon convention of major.minor.path (e.g., 1.0.2) </p> <p>NOTE: This is NOT for versioning of each indiviual data dictionary instance.  Rather, it is the version of THIS schema document. See <code>version</code> property (below) if specifying the individual data dictionary instance version.</p> <p>If generating a vlmd document as a csv file, include this version in  every row/record to indicate this is a schema level property  (not applicable for the json version as this property is already at the schema/root level)</p> <p>Examples:</p> <pre><code>  1.0.0\n</code></pre> <pre><code>  0.2.0\n</code></pre> <p><code>section</code> (string)  The section, form, survey instrument, set of measures  or other broad category used  to group variables. Previously called \"module.\"</p> <p>Examples:</p> <pre><code>  Demographics\n</code></pre> <pre><code>  PROMIS\n</code></pre> <pre><code>  Medical History\n</code></pre> <p><code>name</code> (string,required)  The name of a variable (i.e., field) as it appears in the data. </p> <p>Examples:</p> <pre><code>  gender_id\n</code></pre> <p><code>title</code> (string)  The human-readable title or label of the variable.</p> <p>Examples:</p> <pre><code>  Gender identity\n</code></pre> <p><code>description</code> (string,required)  An extended description of the variable. This could be the definition of a variable or the  question text (e.g., if a survey). </p> <p>Examples:</p> <pre><code>  The participant's age at the time of study enrollment\n</code></pre> <pre><code>  What is the highest grade or level of school you have completed or the highest degree you have received?\n</code></pre> <p><code>type</code> (string)  A classification or category of a particular data element or property expected or allowed in the dataset.</p> <p>Must be one of: <code>number</code>, <code>integer</code>, <code>string</code>, <code>any</code>, <code>boolean</code>, <code>date</code>, <code>datetime</code>, <code>time</code>, <code>year</code>, <code>yearmonth</code>, <code>duration</code>, <code>geopoint</code></p> <p><code>format</code> (string)  Indicates the format of the type specified in the <code>type</code> property.  Each format is dependent on the <code>type</code> specified.  See here  for more information about appropriate <code>format</code> values by variable <code>type</code>.</p> <p><code>constraints.required</code> (boolean)  If this variable is marked as true, then this variable's value must be present (ie not missing; see missingValues). If marked as false or not present, then the  variable CAN be missing.</p> <p><code>constraints.maxLength</code> (integer)  Indicates the maximum length of an iterable (e.g., array, string, or object). For example, if 'Hello World' is the longest value of a categorical variable, this would be a maxLength of 11.</p> <p><code>constraints.enum</code> (string)  Constrains possible values to a set of values.</p> <p>Examples:</p> <pre><code>  1|2|3|4|5\n</code></pre> <pre><code>  Poor|Fair|Good|Very good|Excellent\n</code></pre> <p><code>constraints.pattern</code> (string)  A regular expression pattern the data MUST conform to.</p> <p><code>constraints.maximum</code> (integer)  Specifies the maximum value of a field (e.g., maximum -- or most recent -- date, maximum integer etc). Note, this is different then maxLength property.</p> <p><code>constraints.minimum</code> (integer)  Specifies the minimum value of a field.</p> <p><code>enumLabels</code> (string)  Variable value encodings provide a way to further annotate any value within a any variable type, making values easier to understand. </p> <p>Many analytic software programs (e.g., SPSS,Stata, and SAS) use numerical encodings and some algorithms only support numerical values. Encodings (and mappings) allow categorical values to be stored as numerical values.</p> <p>Additionally, as another use case, this field provides a way to store categoricals that are stored as  \"short\" labels (such as abbreviations).</p> <p>This field is intended to follow this pattern</p> <p>Examples:</p> <pre><code>  1=Poor|2=Fair|3=Good|4=Very good|5=Excellent\n</code></pre> <pre><code>  HW=Hello world|GBW=Good bye world|HM=Hi, Mike\n</code></pre> <p><code>enumOrdered</code> (boolean)  Indicates whether a categorical variable is ordered. This variable  is relevant for variables that have an ordered relationship but not necessarily  a numerical relationship (e.g., Strongly disagree &lt; Disagree &lt; Neutral &lt; Agree).</p> <p>This field is intended to follow the ordering aspect of this [this pattern]this pattern</p> <p><code>missingValues</code> (string)  A list of missing values specific to a variable.</p> <p>Examples:</p> <pre><code>  Missing|Skipped|No preference\n</code></pre> <pre><code>  Missing\n</code></pre> <p><code>trueValues</code> (string)  For boolean (true) variable (as defined in type field), this field allows a physical string representation to be cast as true (increasing readability of the field). It can include one or more values.</p> <p>Examples:</p> <pre><code>  required|Yes|Checked\n</code></pre> <pre><code>  required\n</code></pre> <p><code>falseValues</code> (string)  For boolean (false) variable (as defined in type field), this field allows a physical string representation to be cast as false (increasing readability of the field) that is not a standard false value. It can include one or more values.</p> <p>Examples:</p> <pre><code>  Not required|NOT REQUIRED\n</code></pre> <pre><code>  No\n</code></pre> <p><code>custom</code> (string)  Additional properties not included a core property. </p> <p><code>standardsMappings[0].instrument.url</code> (string)  A url (e.g., link, address) to a file or other resource containing the instrument, or a set of items which encompass a variable in this variable level metadata document (if at the root level or the document level)  or the individual variable (if at the field level). </p> <p>Examples:</p> <pre><code>  https://www.heal.nih.gov/files/CDEs/2023-05/adult-demographics-cdes.xlsx\n</code></pre> <p><code>standardsMappings[0].instrument.source</code> (string)  An abbreviated name/acronym from a controlled vocabulary referencing the resource (e.g., program or repository) containing the instrument, or a set of items which encompass a variable in this variable level metadata document (if at the root level or the document level)  or the individual variable (if at the field level). </p> <p>Must be one of: <code>heal-cde</code></p> <p><code>standardsMappings[0].instrument.title</code> (string)</p> <p>Examples:</p> <pre><code>  Adult demographics\n</code></pre> <pre><code>  adult-demographics\n</code></pre> <p><code>standardsMappings[0].instrument.id</code> (string)  A code or other string that identifies the instrument within the source. This should always be from the source's formal, standardized identification system </p> <p>Examples:</p> <pre><code>  5141\n</code></pre> <p><code>standardsMappings[0].item.url</code> (string)  The url that links out to the published, standardized mapping of a variable (e.g., common data element)</p> <p>Examples:</p> <pre><code>  https://evs.nci.nih.gov/ftp1/CDISC/SDTM/SDTM%20Terminology.html#CL.C74457.RACE\n</code></pre> <p><code>standardsMappings[0].item.source</code> (string)  The source of the standardized variable. Note, this property is required if  an id is specified.</p> <p>Examples:</p> <pre><code>  CDISC\n</code></pre> <p><code>standardsMappings[0].item.id</code> (string)  The id locating the individual mapping within the given source.  Note, the <code>standardsMappings[0].source</code> property is required if  this property is specified.</p> <p>Examples:</p> <pre><code>  C74457\n</code></pre> <p><code>relatedConcepts[0].url</code> (string)  The url that links out to the published, related concept.  The listed examples could both be attached to any variable related to, for example, heroin use.</p> <p>:point_up: if you are looking for mapping field values to common data elements or a set of standards, see <code>standardsMappings</code>_</p> <p>Examples:</p> <pre><code>  https://www.ebi.ac.uk/chebi/chebiOntology.do?chebiId=CHEBI:27808\n</code></pre> <pre><code>  http://purl.bioontology.org/ontology/RXNORM/3304\n</code></pre> <p><code>relatedConcepts[0].title</code> (string)  A human-readable title (ie label) to a concept related to the given field. The listed examples could both be attached to any variable related to, for example, heroin use.</p> <p>:point_up: if you are looking for mapping field values to common data elements or a set of standards, see <code>standardsMappings</code>_</p> <p>Examples:</p> <pre><code>  Heroin Molecular Structure\n</code></pre> <pre><code>  Heroin Ontology\n</code></pre> <p><code>relatedConcepts[0].source</code> (string)  The source (e.g., a dictionary or vocabulary set) to a concept related to the given field. The listed examples could both be attached to any variable related to, for example, heroin use.</p> <p>:point_up: if you are looking for mapping field values to common data elements or a set of standards, see <code>standardsMappings</code>_</p> <p>Examples:</p> <pre><code>  CHEBI\n</code></pre> <pre><code>  RXNORM\n</code></pre> <p><code>relatedConcepts[0].id</code> (string)  The id locating the individual concept within the source of the given field. The listed examples could both be attached to any variable related to, for example, heroin use.</p> <p>:point_up: if you are looking for mapping field values to common data elements or a set of standards, see <code>standardsMappings</code>_</p> <p>Examples:</p> <pre><code>  27808\n</code></pre> <pre><code>  3304\n</code></pre>"},{"location":"vlmd/schemas/csv-fields/#end-of-schema-additional-property-information","title":"End of schema - Additional Property information","text":""},{"location":"vlmd/schemas/csv-fields/#type-enum-definitions","title":"<code>type</code> enum definitions:","text":"<ul> <li><code>number</code> (A numeric value with optional decimal places. (e.g., 3.14))</li> <li><code>integer</code> (A whole number without decimal places. (e.g., 42))</li> <li><code>string</code> (A sequence of characters. (e.g., \\\"test\\\"))</li> <li><code>any</code> (Any type of data is allowed. (e.g., true))</li> <li><code>boolean</code> (A binary value representing true or false. (e.g., true))</li> <li><code>date</code> (A specific calendar date. (e.g., \\\"2023-05-25\\\"))</li> <li><code>datetime</code> (A specific date and time, including timezone information. (e.g., \\\"2023-05-25T10:30:00Z\\\"))</li> <li><code>time</code> (A specific time of day. (e.g., \\\"10:30:00\\\"))</li> <li><code>year</code> (A specific year. (e.g., 2023)</li> <li><code>yearmonth</code> (A specific year and month. (e.g., \\\"2023-05\\\"))</li> <li><code>duration</code> (A length of time. (e.g., \\\"PT1H\\\")</li> <li><code>geopoint</code> (A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278]))</li> </ul>"},{"location":"vlmd/schemas/csv-fields/#format-examplesdefinitions-of-patterns-and-possible-values","title":"<code>format</code> examples/definitions of patterns and possible values:","text":"<p>Examples of date time pattern formats</p> <ul> <li><code>%Y-%m-%d</code> (for date, e.g., 2023-05-25)</li> <li><code>%Y%-%d</code> (for date, e.g., 20230525) for date without dashes</li> <li><code>%Y-%m-%dT%H:%M:%S</code> (for datetime, e.g., 2023-05-25T10:30:45)</li> <li><code>%Y-%m-%dT%H:%M:%SZ</code> (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)</li> <li><code>%Y-%m-%dT%H:%M:%S%z</code> (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)</li> <li><code>%Y-%m-%dT%H:%M</code> (for datetime without seconds, e.g., 2023-05-25T10:30)</li> <li><code>%Y-%m-%dT%H</code> (for datetime without minutes and seconds, e.g., 2023-05-25T10)</li> <li><code>%H:%M:%S</code> (for time, e.g., 10:30:45)</li> <li><code>%H:%M:%SZ</code> (for time with UTC timezone, e.g., 10:30:45Z)</li> <li><code>%H:%M:%S%z</code> (for time with timezone offset, e.g., 10:30:45+0300)</li> </ul> <p>Examples of string formats</p> <ul> <li><code>email</code> if valid emails (e.g., test@gmail.com)</li> <li><code>uri</code> if valid uri addresses (e.g., https://example.com/resource123)</li> <li><code>binary</code> if a base64 binary encoded string (e.g., authentication token like aGVsbG8gd29ybGQ=)</li> <li><code>uuid</code> if a universal unique identifier also known as a guid (eg., f47ac10b-58cc-4372-a567-0e02b2c3d479)</li> </ul> <p>Examples of geopoint formats</p> <p>The two types of formats for <code>geopoint</code> (describing a geographic point).</p> <ul> <li><code>array</code> (if 'lat,long' (e.g., 36.63,-90.20))</li> <li><code>object</code> (if {'lat':36.63,'lon':-90.20})</li> </ul>"},{"location":"vlmd/schemas/json-data-dictionary/","title":"Variable Level Metadata (Data Dictionaries)","text":"<p>version 0.2.0</p> <p>This schema defines the variable level metadata for one data dictionary for a given study.Note a given study can have multiple data dictionaries.</p>"},{"location":"vlmd/schemas/json-data-dictionary/#title-stringrequired","title":"<code>title</code> (string,required)","text":""},{"location":"vlmd/schemas/json-data-dictionary/#description-string","title":"<code>description</code> (string)","text":""},{"location":"vlmd/schemas/json-data-dictionary/#schemaversion-string","title":"<code>schemaVersion</code> (string)","text":"<p>The version of the schema used in agreed upon convention of major.minor.path (e.g., 1.0.2) </p> <p>NOTE: This is NOT for versioning of each indiviual data dictionary instance.  Rather, it is the version of THIS schema document. See <code>version</code> property (below) if specifying the individual data dictionary instance version.</p> <p>If generating a vlmd document as a csv file, include this version in  every row/record to indicate this is a schema level property  (not applicable for the json version as this property is already at the schema/root level)</p>"},{"location":"vlmd/schemas/json-data-dictionary/#version-string","title":"<code>version</code> (string)","text":"<p>The specified individual data dictionary instance version.</p>"},{"location":"vlmd/schemas/json-data-dictionary/#standardsmappings-array","title":"<code>standardsMappings</code> (array)","text":"<p>A set of standardized instruments linked to all variables within the <code>fields</code> property (but see note).</p> <p>NOTE</p> <p>If <code>standardsMappings</code> is present at both the root (this property) and within <code>fields</code>,    then the <code>fields</code> <code>standardsMappings</code> property takes precedence.</p> <p>Note, only instrument can be mapped to this property as opposed to the <code>fields</code> <code>standardsMappings</code>   This property has the same specification as the <code>fields</code> <code>standardsMappings</code> to make the cascading logic   easier to understand in the same way other standards implement cascading    (e.g., <code>missingValues</code> in the frictionless specification)</p>"},{"location":"vlmd/schemas/json-data-dictionary/#custom-object","title":"<code>custom</code> (object)","text":"<p>Additional properties not included as a core property. </p>"},{"location":"vlmd/schemas/json-data-dictionary/#fields-arrayrequired","title":"<code>fields</code> (array,required)","text":"<p>Highly encouraged</p> <ul> <li>Only <code>name</code> and <code>description</code> properties are required. </li> <li>For categorical variables, <code>constraints.enum</code> and <code>enumLabels</code> (where applicable) properties are highly encouraged. </li> <li>For studies using HEAL or other common data elements (CDEs), <code>standardsMappings</code> information is highly encouraged.</li> <li><code>type</code> and <code>format</code> properties may be particularly useful for some variable types (e.g. date-like variables)</li> </ul>"},{"location":"vlmd/schemas/json-data-dictionary/#properties-for-each-fields-record","title":"Properties for each <code>fields</code> record","text":"<p><code>schemaVersion</code> (string)  The version of the schema used in agreed upon convention of major.minor.path (e.g., 1.0.2) </p> <p>NOTE: This is NOT for versioning of each indiviual data dictionary instance.  Rather, it is the version of THIS schema document. See <code>version</code> property (below) if specifying the individual data dictionary instance version.</p> <p>If generating a vlmd document as a csv file, include this version in  every row/record to indicate this is a schema level property  (not applicable for the json version as this property is already at the schema/root level)</p> <p>Examples:</p> <pre><code>  1.0.0\n</code></pre> <pre><code>  0.2.0\n</code></pre> <p><code>section</code> (string)  The section, form, survey instrument, set of measures  or other broad category used  to group variables. Previously called \"module.\"</p> <p>Examples:</p> <pre><code>  Demographics\n</code></pre> <pre><code>  PROMIS\n</code></pre> <pre><code>  Medical History\n</code></pre> <p><code>name</code> (string,required)  The name of a variable (i.e., field) as it appears in the data. </p> <p>Examples:</p> <pre><code>  gender_id\n</code></pre> <p><code>title</code> (string)  The human-readable title or label of the variable.</p> <p>Examples:</p> <pre><code>  Gender identity\n</code></pre> <p><code>description</code> (string,required)  An extended description of the variable. This could be the definition of a variable or the  question text (e.g., if a survey). </p> <p>Examples:</p> <pre><code>  The participant's age at the time of study enrollment\n</code></pre> <pre><code>  What is the highest grade or level of school you have completed or the highest degree you have received?\n</code></pre> <p><code>type</code> (string)  A classification or category of a particular data element or property expected or allowed in the dataset.</p> <p>Must be one of: <code>number</code>, <code>integer</code>, <code>string</code>, <code>any</code>, <code>boolean</code>, <code>date</code>, <code>datetime</code>, <code>time</code>, <code>year</code>, <code>yearmonth</code>, <code>duration</code>, <code>geopoint</code></p> <p><code>format</code> (string)  Indicates the format of the type specified in the <code>type</code> property.  Each format is dependent on the <code>type</code> specified.  See here  for more information about appropriate <code>format</code> values by variable <code>type</code>.</p> <p><code>constraints</code> (object)</p> <ul> <li> <p><code>required</code> (boolean)      If this variable is marked as true, then this variable's value must be present     (ie not missing; see missingValues). If marked as false or not present, then the      variable CAN be missing.</p> </li> <li> <p><code>maxLength</code> (integer)      Indicates the maximum length of an iterable (e.g., array, string, or     object). For example, if 'Hello World' is the longest value of a     categorical variable, this would be a maxLength of 11.</p> </li> <li> <p><code>enum</code> (array)      Constrains possible values to a set of values.</p> <p>Examples:</p> <pre><code>  [1, 2, 3, 4, 5]\n</code></pre> <pre><code>  ['Poor', 'Fair', 'Good', 'Very good', 'Excellent']\n</code></pre> </li> <li> <p><code>pattern</code> (string)      A regular expression pattern the data MUST conform to.</p> </li> <li> <p><code>maximum</code> (integer)      Specifies the maximum value of a field (e.g., maximum -- or most     recent -- date, maximum integer etc). Note, this is different then     maxLength property.</p> </li> <li> <p><code>minimum</code> (integer)      Specifies the minimum value of a field.</p> </li> </ul> <p><code>enumLabels</code> (object)  Variable value encodings provide a way to further annotate any value within a any variable type, making values easier to understand. </p> <p>Many analytic software programs (e.g., SPSS,Stata, and SAS) use numerical encodings and some algorithms only support numerical values. Encodings (and mappings) allow categorical values to be stored as numerical values.</p> <p>Additionally, as another use case, this field provides a way to store categoricals that are stored as  \"short\" labels (such as abbreviations).</p> <p>This field is intended to follow this pattern</p> <p>Examples:</p> <pre><code>  {'1': 'Poor', '2': 'Fair', '3': 'Good', '4': 'Very good', '5': 'Excellent'}\n</code></pre> <pre><code>  {'HW': 'Hello world', 'GBW': 'Good bye world', 'HM': 'Hi, Mike'}\n</code></pre> <p><code>enumOrdered</code> (boolean)  Indicates whether a categorical variable is ordered. This variable  is relevant for variables that have an ordered relationship but not necessarily  a numerical relationship (e.g., Strongly disagree &lt; Disagree &lt; Neutral &lt; Agree).</p> <p>This field is intended to follow the ordering aspect of this [this pattern]this pattern</p> <p><code>missingValues</code> (array)  A list of missing values specific to a variable.</p> <p>Examples:</p> <pre><code>  ['Missing', 'Skipped', 'No preference']\n</code></pre> <pre><code>  ['Missing']\n</code></pre> <p><code>trueValues</code> (array)  For boolean (true) variable (as defined in type field), this field allows a physical string representation to be cast as true (increasing readability of the field). It can include one or more values.</p> <p>Examples:</p> <pre><code>  ['required', 'Yes', 'Checked']\n</code></pre> <pre><code>  ['required']\n</code></pre> <p><code>falseValues</code> (array)  For boolean (false) variable (as defined in type field), this field allows a physical string representation to be cast as false (increasing readability of the field) that is not a standard false value. It can include one or more values.</p> <p>Examples:</p> <pre><code>  ['Not required', 'NOT REQUIRED']\n</code></pre> <pre><code>  ['No']\n</code></pre> <p><code>custom</code> (object)  Additional properties not included a core property. </p> <p><code>standardsMappings</code> (array)</p> <p>A set of instrument and item references to standardized data elements designed to document the HEAL common data elements program and other standardized/common element sources to facilitate cross-study comparison and interoperability of data. One can either map an individual data element or an instrument in which the field is  a part of.</p> <p>All Fields Mapped (Both Instrument and Item)</p> <pre><code>\"standardsMappings\": [\n    {\n        \"instrument\": {\n            \"url\": \"https://www.heal.nih.gov/files/CDEs/2023-05/adult-demographics-cdes.xlsx\",\n            \"source\": \"heal-cde\",\n            \"title\": \"adult-demographics\",\n            \"id\": \"5141\"\n        },\n        \"item\": {\n            \"url\": \"https://evs.nci.nih.gov/ftp1/CDISC/SDTM/SDTM%20Terminology.html#CL.C74457.RACE\",\n            \"source\": \"CDISC\",\n            \"id\": \"C74457\"\n        }\n    }\n]\n</code></pre> <p>Only Instrument Title of Form CDE File Mapped</p> <p>In this scenario, especially as CDE variables do not have associated CDISC ids listed, only instrument information is given.</p> <pre><code>\"standardsMappings\": [\n    {\n        \"instrument\": {\n            \"source\": \"heal-cde\",\n            \"title\": \"Adult demographics\"\n        }\n    }\n]\n</code></pre> <p>Only Instrument ID of HEAL CDE Mapped</p> <pre><code>\"standardsMappings\": [\n    {\n        \"instrument\": {\n            \"source\": \"heal-cde\",\n            \"id\": \"5141\"\n        }\n    }\n]\n</code></pre> <p>Other Non-HEAL CDE Use Cases</p> <p>Only item matched (for example if found in the NIH (not HEAL) CDE repository). Folks would enter the information in the \"Identifier\" section. Similar to the above, they could also just enter the \"url\".</p> <pre><code>\"standardsMappings\": [\n    {\n        \"item\": {\n            \"source\": \"NLM\",\n            \"id\": \"Fakc6Jy2x\"\n        }\n    }\n]\n</code></pre> <p>Multiple CDE Mappings</p> <p>Two separate records. If desired, multiple standard mappings can be entered, say from the NIH HEAL CDE repo and the NIH CDE lookup (NLM) by way of two separate records in the list.</p> <pre><code>\"standardsMappings\": [\n    {\n        \"instrument\": {\n            \"source\": \"heal-cde\",\n            \"title\": \"Adult demographics\"\n        },\n        \"item\": {\n            \"source\": \"CDISC\",\n            \"id\": \"C74457\"\n        },\n    },\n    {\n        \"item\": {\n            \"source\": \"NLM\",\n            \"id\": \"Fakc6Jy2x\"\n        }\n    }\n]\n</code></pre> <p><code>relatedConcepts</code> (array) [Under development] Mappings to a published set of concepts related to the given field such as  ontological information (eg., NCI thesaurus, bioportal etc)</p>"},{"location":"vlmd/schemas/json-data-dictionary/#additional-fields-property-information","title":"Additional <code>fields</code> property information","text":""},{"location":"vlmd/schemas/json-data-dictionary/#type-enum-definitions","title":"<code>type</code> enum definitions:","text":"<ul> <li><code>number</code> (A numeric value with optional decimal places. (e.g., 3.14))</li> <li><code>integer</code> (A whole number without decimal places. (e.g., 42))</li> <li><code>string</code> (A sequence of characters. (e.g., \\\"test\\\"))</li> <li><code>any</code> (Any type of data is allowed. (e.g., true))</li> <li><code>boolean</code> (A binary value representing true or false. (e.g., true))</li> <li><code>date</code> (A specific calendar date. (e.g., \\\"2023-05-25\\\"))</li> <li><code>datetime</code> (A specific date and time, including timezone information. (e.g., \\\"2023-05-25T10:30:00Z\\\"))</li> <li><code>time</code> (A specific time of day. (e.g., \\\"10:30:00\\\"))</li> <li><code>year</code> (A specific year. (e.g., 2023)</li> <li><code>yearmonth</code> (A specific year and month. (e.g., \\\"2023-05\\\"))</li> <li><code>duration</code> (A length of time. (e.g., \\\"PT1H\\\")</li> <li><code>geopoint</code> (A pair of latitude and longitude coordinates. (e.g., [51.5074, -0.1278]))</li> </ul>"},{"location":"vlmd/schemas/json-data-dictionary/#format-examplesdefinitions-of-patterns-and-possible-values","title":"<code>format</code> examples/definitions of patterns and possible values:","text":"<p>Examples of date time pattern formats</p> <ul> <li><code>%Y-%m-%d</code> (for date, e.g., 2023-05-25)</li> <li><code>%Y%-%d</code> (for date, e.g., 20230525) for date without dashes</li> <li><code>%Y-%m-%dT%H:%M:%S</code> (for datetime, e.g., 2023-05-25T10:30:45)</li> <li><code>%Y-%m-%dT%H:%M:%SZ</code> (for datetime with UTC timezone, e.g., 2023-05-25T10:30:45Z)</li> <li><code>%Y-%m-%dT%H:%M:%S%z</code> (for datetime with timezone offset, e.g., 2023-05-25T10:30:45+0300)</li> <li><code>%Y-%m-%dT%H:%M</code> (for datetime without seconds, e.g., 2023-05-25T10:30)</li> <li><code>%Y-%m-%dT%H</code> (for datetime without minutes and seconds, e.g., 2023-05-25T10)</li> <li><code>%H:%M:%S</code> (for time, e.g., 10:30:45)</li> <li><code>%H:%M:%SZ</code> (for time with UTC timezone, e.g., 10:30:45Z)</li> <li><code>%H:%M:%S%z</code> (for time with timezone offset, e.g., 10:30:45+0300)</li> </ul> <p>Examples of string formats</p> <ul> <li><code>email</code> if valid emails (e.g., test@gmail.com)</li> <li><code>uri</code> if valid uri addresses (e.g., https://example.com/resource123)</li> <li><code>binary</code> if a base64 binary encoded string (e.g., authentication token like aGVsbG8gd29ybGQ=)</li> <li><code>uuid</code> if a universal unique identifier also known as a guid (eg., f47ac10b-58cc-4372-a567-0e02b2c3d479)</li> </ul> <p>Examples of geopoint formats</p> <p>The two types of formats for <code>geopoint</code> (describing a geographic point).</p> <ul> <li><code>array</code> (if 'lat,long' (e.g., 36.63,-90.20))</li> <li><code>object</code> (if {'lat':36.63,'lon':-90.20})</li> </ul>"},{"location":"vlmd/start/","title":"<code>Start</code> from a template","text":"<p>Some folks may prefer to create their HEAL data dictionary from scratch. To support this, we have created a utility that creates either a json or csv template. </p> <p>Warning</p> <p>Currently, the command is <code>template</code> but will change to <code>start</code> to be consistent with the verb subcommand vocabulary.</p>"},{"location":"vlmd/start/#csv-template","title":"<code>csv</code> template","text":"<p>The HEAL Data Utilities can also input a <code>csv</code> HEAL data dictionary either from a manually filled out template or  as an additional step after further annotation (e.g., from the <code>csv</code> HEAL data dictionary output of the other file formats).</p> <p>To create a template <code>csv</code> version with 10 fields (variables):</p> Command line interface (CLI)Python <pre><code>vlmd template myhealdd.csv --numfields 10\n</code></pre> <pre><code>from healdata_utils import write_vlmd_template\n\nwrite_vlmd_template(tmpdir.joinpath(\"heal.csv\"),numfields=10)\n</code></pre> <p>Click here to download an example of a filled out csv HEAL data dictionary template</p>"},{"location":"vlmd/start/#json-template","title":"<code>json</code> template","text":"<p>While the <code>csv</code> HEAL data dictionary provides a tabular format for HEAL-compliant data dictionaries, ultimately,  these csv data dictionary files are converted to a json file (the most common format to store and exchange data within web applications such as the HEAL Data Platform). </p> <p>Another advantage of <code>json</code> HEAL data dictionaries is that one can specify metadata describing the data dictionary as a whole (e.g., the <code>description</code> and <code>title</code>). </p> <p>To create a template <code>json</code> version with 10 fields (variables):</p> Command line interface (CLI)Python <pre><code>vlmd template myhealdd.json --numfields 10\n</code></pre> <pre><code>from healdata_utils import write_vlmd_template\n\nwrite_vlmd_template(tmpdir.joinpath(\"heal.json\"),numfields=10)\n</code></pre> <p>Click here to download an example of filled out json HEAL data dictionary template</p>"},{"location":"vlmd/validate/","title":"<code>Validate</code> Check (validate) an existing HEAL data dictionary file","text":"<p>Will indicate if the data dictionary complies with the HEAL specifications.</p> Command line interface (CLI)Python <pre><code>vlmd validate data/myhealcsvdd.csv\n\nvlmd validate data/myhealjsondd.json\n</code></pre> <pre><code>from healdata_utils import validate_vlmd_csv,validate_vlmd_json\n\nvalidate_vlmd_csv(\"data/myhealcsvdd.csv\")\n\nvalidate_vlmd_json(\"data/myhealjsondd.json\")\n</code></pre>"}]}