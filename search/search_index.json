{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HEAL Data Utilities \u00b6 The HEAL data utilities python package provides data packaging tools for the HEAL data ecosystem to facilitate data discovery,sharing, and harmonization with a focus on the HEAL platform data consultancy (DSC). Currently, the focus of the repo is on generating data-dictionaries (see Variable level metadata section below). However, in the future, this will be expanded for all heal specific data packaging functions (e.g., study and file level metadata and data). Installation \u00b6 To install the latest official release of healdata-utils, from your computer's command prompt, run: pip install healdata-utils to install the working, un-released version from this git repository, run: pip install git+https://github.com/norc-heal/healdata-utils.git Variable level metadata (data dictionaries) \u00b6 The healdata-utils variable level metadata (vlmd) tool inputs a variety of different input file types and exports HEAL-formatted data dictionaries (JSON and CSV formats). Additionally, exported validation (ie \"error\") reports provide the user information as to a. if the exported data dictionary is valid according to HEAL specifications (see the schema repository here ). For support formats and more detailed software specific instructions and recommendations, see here Basic usage \u00b6 The vlmd tool can be used via python or the command line. Using from python \u00b6 From your current working directory in python, run: from healdata_utils.cli import convert_to_vlmd # description and title are optional. If submitting through platform, can fill these out there. description = \"This is a proof of concept to demonstrate the healdata-utils functionality\" title = \"Healdata-utils Demonstration Data Dictionary\" healdir = \"output\" # can also specify a file name if desired (eg output/thisismynewdd.csv) inputpath = \"input/my-redcap-data-dictionary-export.csv\" data_dictionaries = convert_to_vlmd ( filepath = inputpath , outputdir = healdir , inputtype = input_type , #if not specified, looks for suffix data_dictionary_props = { \"title\" : title , \"description\" : description } #data_dictionary_props is optional ) This will output the data dictionaries to the specified output directory (see ooutput section below) and also save the json/csv versions in the data_dictionaries object. For the available input file formats (ie the available choices for the inputtype parameter), one can run (from python): from healdata_utils.cli import input_descriptions input_descriptions The input_descriptions object contains the choice for inputtype as the key and the description as the value. Using from the command line \u00b6 From your current working directory run: (note the \\ at the end of each line signals a line continuation for ease in understanding the long one line command.) Again the --title and --description options are optional. For descriptions on the different flags/options, run vlmd --help vlmd --filepath \"data/example_pyreadstat_output.sav\" \\ --outputdir \"output-cli\" \\ --title \"Healdata-utils Demonstration Data Dictionary\" \\ --description \"This is a proof of concept to demonstrate the healdata-utils functionality\" Output \u00b6 Both the python and command line routes will result in a JSON and CSV version of the HEAL data dictionary in the output folder along with the validation reports in the errors folder. See below: input/input/my-redcap-data-dictionary-export.csv : your input file output/errors/heal-csv-errors.json : outputted validation report for table in csv file against frictionless schema see schema here output/errors/heal-json-errors.json : outputted jsonschema validation report. see schema here output/heal-csvtemplate-data-dictionary.csv : This is the CSV data dictionary output/heal-jsontemplate-data-dictionary.json : This is the JSON version of the data dictionary Note, only the JSON version will have the user-specified title and description Interactive notebooks \u00b6 See the below notebooks demonstrating use and workflows using the convert_to_vlmd in python and vlmd in the command line. Clicking on the \"binder badges\" will bring you to an interactive notebook page where you can test out the notebooks. Here, healdata-utils comes pre-installed. Generating a heal data dictionary from a variety of input files click here for static notebook click binder badge for interactive [in development] Creating and iterating over a csv data dictionary to create a valid data dictionary file click here","title":"Home"},{"location":"#heal-data-utilities","text":"The HEAL data utilities python package provides data packaging tools for the HEAL data ecosystem to facilitate data discovery,sharing, and harmonization with a focus on the HEAL platform data consultancy (DSC). Currently, the focus of the repo is on generating data-dictionaries (see Variable level metadata section below). However, in the future, this will be expanded for all heal specific data packaging functions (e.g., study and file level metadata and data).","title":"HEAL Data Utilities"},{"location":"#installation","text":"To install the latest official release of healdata-utils, from your computer's command prompt, run: pip install healdata-utils to install the working, un-released version from this git repository, run: pip install git+https://github.com/norc-heal/healdata-utils.git","title":"Installation"},{"location":"#variable-level-metadata-data-dictionaries","text":"The healdata-utils variable level metadata (vlmd) tool inputs a variety of different input file types and exports HEAL-formatted data dictionaries (JSON and CSV formats). Additionally, exported validation (ie \"error\") reports provide the user information as to a. if the exported data dictionary is valid according to HEAL specifications (see the schema repository here ). For support formats and more detailed software specific instructions and recommendations, see here","title":"Variable level metadata (data dictionaries)"},{"location":"#basic-usage","text":"The vlmd tool can be used via python or the command line.","title":"Basic usage"},{"location":"#using-from-python","text":"From your current working directory in python, run: from healdata_utils.cli import convert_to_vlmd # description and title are optional. If submitting through platform, can fill these out there. description = \"This is a proof of concept to demonstrate the healdata-utils functionality\" title = \"Healdata-utils Demonstration Data Dictionary\" healdir = \"output\" # can also specify a file name if desired (eg output/thisismynewdd.csv) inputpath = \"input/my-redcap-data-dictionary-export.csv\" data_dictionaries = convert_to_vlmd ( filepath = inputpath , outputdir = healdir , inputtype = input_type , #if not specified, looks for suffix data_dictionary_props = { \"title\" : title , \"description\" : description } #data_dictionary_props is optional ) This will output the data dictionaries to the specified output directory (see ooutput section below) and also save the json/csv versions in the data_dictionaries object. For the available input file formats (ie the available choices for the inputtype parameter), one can run (from python): from healdata_utils.cli import input_descriptions input_descriptions The input_descriptions object contains the choice for inputtype as the key and the description as the value.","title":"Using from python"},{"location":"#using-from-the-command-line","text":"From your current working directory run: (note the \\ at the end of each line signals a line continuation for ease in understanding the long one line command.) Again the --title and --description options are optional. For descriptions on the different flags/options, run vlmd --help vlmd --filepath \"data/example_pyreadstat_output.sav\" \\ --outputdir \"output-cli\" \\ --title \"Healdata-utils Demonstration Data Dictionary\" \\ --description \"This is a proof of concept to demonstrate the healdata-utils functionality\"","title":"Using from the command line"},{"location":"#output","text":"Both the python and command line routes will result in a JSON and CSV version of the HEAL data dictionary in the output folder along with the validation reports in the errors folder. See below: input/input/my-redcap-data-dictionary-export.csv : your input file output/errors/heal-csv-errors.json : outputted validation report for table in csv file against frictionless schema see schema here output/errors/heal-json-errors.json : outputted jsonschema validation report. see schema here output/heal-csvtemplate-data-dictionary.csv : This is the CSV data dictionary output/heal-jsontemplate-data-dictionary.json : This is the JSON version of the data dictionary Note, only the JSON version will have the user-specified title and description","title":"Output"},{"location":"#interactive-notebooks","text":"See the below notebooks demonstrating use and workflows using the convert_to_vlmd in python and vlmd in the command line. Clicking on the \"binder badges\" will bring you to an interactive notebook page where you can test out the notebooks. Here, healdata-utils comes pre-installed. Generating a heal data dictionary from a variety of input files click here for static notebook click binder badge for interactive [in development] Creating and iterating over a csv data dictionary to create a valid data dictionary file click here","title":"Interactive notebooks"},{"location":"contributing/","text":"","title":"Contributing"},{"location":"install/","text":"","title":"Install"},{"location":"supported_input_formats/","text":"Supported Input Formats \u00b6 In this section, supported formats for generating heal-compliant data dictionaries are listed. We also provide additional instructions on how to get the necessary input files format/software. Redcap: Data Dictionary CSV Export \u00b6 For users collecting data in a Redcap data management system, HEAL-compliant data dictionaries can be generated directly from Redcap exports. The redcap data dictionary export serves the purpose of providing variable level metadata in a standardized,tabular format and is generally easy to export. The HEAL data utilities leverages this user experience and standardized format to enable HEAL researchers to generate a Heal-compliant data dictionary. Export your Redcap data dictionary \u00b6 To download a Redcap CSV export do the following*: After logging in to your Redcap project page, locate the Data dictionary page. A link to this page may be available on the project side bar (see image below) or in the Project Setup tab at the top of your page. After arriving at the Data dictionary page, click on Download the current data dictionary to export the dictionary (see below). *there may be slight differences depending on your specific Redcap instance and version Run the vlmd command \u00b6 vlmd --filepath input/example_redcap_demo.redcap.csv --inputtype redcap.csv --outputdir output/heal-vlmd-from-redcap.csv SAS sas7bdat (and sas7bcat ) files \u00b6 To accomodate SAS users, HEAL data utilities supports the binary Sas7bdat file format, which contains the actual data values (observations/records). This file also includes variable metadata (variable names and variable labels/ descriptions ). HEAL data utilities also provides the option to accompany the sas7bdat file with a file of another format -- the Sas7bcat file. This type of file contains variable value labels, or encodings that can be mapped onto datasets. Creating a sas7bdat and a sas7bcat file \u00b6 Many SAS users create formats and labels in their current workflows. In this section, we provide syntax that can be easily copy-pasted into these existing workflows to create sas7bdat and sas7bcat files to input easily into the vlmd tool. This script template can be run separately or inserted directly at the end of a SAS user's workflow. Template template.sas /*1. Read in data file without value labels and run full code. Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps that assign formats and variable labels which are needed for the data dictionary*/ %INCLUDE \"<INSERT SAS SCRIPT HERE FILE PATH HERE>\" ; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/ %INCLUDE \"<INSERT SAS SCRIPT HERE FILE PATH HERE>\" ; /* THIS WILL RUN A SECOND SEPARATE SAS SCRIPT*/ /*2. Output the format catalog (sas7bcat) */ /*2a. If you do not have an out directory, assign one to output the SAS catalog and data file - maybe this should be at the very top?*/ libname out \"<INSERT THE DESIRED LOCATION (FILE PATH) TO YOUR SAS7BCAT AND SAS7BDAT FILES HERE>\" ; /*2b. Output the format catalog. The format catalog is automatically stored in work.formats. This step copies the format file to the out directory as a sas7bcat file.*/ proc catalog cat=work . FORMATS; copy out = out . FORMATS ; run; /*3. Output the data file (sas7bdat) */ data out . yourdata; set < INSERT THE NAME OF YOUR FINAL SAS DATASET HERE> ; run; The below SAS syntax is an example of how to use the template within your SAS workflow. Here we create all of our variable and value labels. This could be within one or multiple sas scripts but for demonstration purposes, we only use one script. In your existing workflows, these may also include analyses and other PROC calls for data exploration Example my_existing_sas_workflow.sas /*2. Read in input data */ proc import datafile= \"myprojectfolder/input/mydata.csv\" out =raw dbms=csv replace ; getnames=yes ; run; /*3. Set up proc format and apply formats and variable labels in data step */ proc format; VALUE YESNO 0 = \"No\" 1 = \"Yes\" VALUE PUBLIC 1 = 'State mental health authority (SMHA)' 2 = 'Other state government agency or department' 3 = 'Regional/district authority or county, local, or municipal government' 4 = 'Tribal government' 5 = 'Indian Health Service' 6 = 'Department of Veterans Affairs' 7 = 'Other' VALUE FOCUS 1 = 'Mental health treatment' 2 = 'Substance abuse treatment' 3 = 'Mix of mental health and substance abuse treatment (neither is primary)' 4 = 'General health care' 5 = 'Other service focus' ; **Apply formats; data processed; set raw; format YOUNGADULTS TREATPSYCHOTHRPY TREATTRAUMATHRPY YESNO. FOCUS FOCUS. PUBLIC PUBLIC.; label YOUNGADULTS= \"Accepts young adults (aged 18-25 years old) for Tx\" TREATPSYCHOTHRPY= \"Facility offers individual psychotherapy\" TREATTRAUMATHRPY= \"Facility offers trauma therapy\" FOCUS= \"Primary treatment focus of facility\" PUBLIC= \"Public agency or department that operates facility\" ; run; This second script called my_output.sas is the filled out template ( see here ). Note the %INCLUDE function that calls my_existing_sas_workflow.sas my_output.sas /*1. Read in data file without value labels and run full code. Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps that assign formats and variable labels which are needed for the data dictionary*/ %INCLUDE \"myprojectfolder/myworkflow.sas\" ; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/ /*2. Output the format catalog (sas7bcat) */ libname out \"myprojectfolder/output\" ; /*2b. Output the format catalog. The format catalog is automatically stored in work.formats. This step copies the format file to the out directory as a sas7bcat file.*/ proc catalog cat=work . FORMATS; copy out = out . FORMATS ; run; /*3. Output the data file (sas7bdat) to your output folder*/ data out . yourdata; set processed ; run; Run the vlmd command \u00b6 After creating the necessary sas7bdat and sas7bcat files, you can then run the vlmd command. Note, the sas7bcat files are optional. However, if you don't include, the encodings (ie value labels) will not be added. vlmd --filepath input/data.sas7bdat --sas7bcat-filepath input/formats.sas7bcat --inputtype sas7bdat SPSS .sav files \u00b6 For SPSS users, HEAL data utilities generates heal-compliant data dictioanries from SPSS's default file format for storing datasets: A SAV file. It not only stores the data itself but also stores metadata such as variable names, variable labels, types, and value labels. The HEAL data utilities extracts the data and metadata to create heal-compliant data dictionaries. Run the vlmd command \u00b6 vlmd --filepath data/example_pyreadstat_output.sav --inputtype sav Stata .dta files \u00b6 For Stata users, HEAL data utilities generates heal-compliant data dictionaries through Stata's default file format: the DTA files. DTA files not only store the data itself but also stores metadata such as variable names, variable labels, types, and value labels. Run the vlmd command \u00b6 vlmd --filepath data/example_pyreadstat_output.dta --inputtype dta csv Datasets \u00b6 HEAL data dictionary template \u00b6","title":"Supported Input Formats"},{"location":"supported_input_formats/#supported-input-formats","text":"In this section, supported formats for generating heal-compliant data dictionaries are listed. We also provide additional instructions on how to get the necessary input files format/software.","title":"Supported Input Formats"},{"location":"supported_input_formats/#redcap-data-dictionary-csv-export","text":"For users collecting data in a Redcap data management system, HEAL-compliant data dictionaries can be generated directly from Redcap exports. The redcap data dictionary export serves the purpose of providing variable level metadata in a standardized,tabular format and is generally easy to export. The HEAL data utilities leverages this user experience and standardized format to enable HEAL researchers to generate a Heal-compliant data dictionary.","title":"Redcap: Data Dictionary CSV Export"},{"location":"supported_input_formats/#export-your-redcap-data-dictionary","text":"To download a Redcap CSV export do the following*: After logging in to your Redcap project page, locate the Data dictionary page. A link to this page may be available on the project side bar (see image below) or in the Project Setup tab at the top of your page. After arriving at the Data dictionary page, click on Download the current data dictionary to export the dictionary (see below). *there may be slight differences depending on your specific Redcap instance and version","title":"Export your Redcap data dictionary"},{"location":"supported_input_formats/#run-the-vlmd-command","text":"vlmd --filepath input/example_redcap_demo.redcap.csv --inputtype redcap.csv --outputdir output/heal-vlmd-from-redcap.csv","title":"Run the vlmd command"},{"location":"supported_input_formats/#sas-sas7bdat-and-sas7bcat-files","text":"To accomodate SAS users, HEAL data utilities supports the binary Sas7bdat file format, which contains the actual data values (observations/records). This file also includes variable metadata (variable names and variable labels/ descriptions ). HEAL data utilities also provides the option to accompany the sas7bdat file with a file of another format -- the Sas7bcat file. This type of file contains variable value labels, or encodings that can be mapped onto datasets.","title":"SAS sas7bdat (and sas7bcat) files"},{"location":"supported_input_formats/#creating-a-sas7bdat-and-a-sas7bcat-file","text":"Many SAS users create formats and labels in their current workflows. In this section, we provide syntax that can be easily copy-pasted into these existing workflows to create sas7bdat and sas7bcat files to input easily into the vlmd tool. This script template can be run separately or inserted directly at the end of a SAS user's workflow. Template template.sas /*1. Read in data file without value labels and run full code. Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps that assign formats and variable labels which are needed for the data dictionary*/ %INCLUDE \"<INSERT SAS SCRIPT HERE FILE PATH HERE>\" ; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/ %INCLUDE \"<INSERT SAS SCRIPT HERE FILE PATH HERE>\" ; /* THIS WILL RUN A SECOND SEPARATE SAS SCRIPT*/ /*2. Output the format catalog (sas7bcat) */ /*2a. If you do not have an out directory, assign one to output the SAS catalog and data file - maybe this should be at the very top?*/ libname out \"<INSERT THE DESIRED LOCATION (FILE PATH) TO YOUR SAS7BCAT AND SAS7BDAT FILES HERE>\" ; /*2b. Output the format catalog. The format catalog is automatically stored in work.formats. This step copies the format file to the out directory as a sas7bcat file.*/ proc catalog cat=work . FORMATS; copy out = out . FORMATS ; run; /*3. Output the data file (sas7bdat) */ data out . yourdata; set < INSERT THE NAME OF YOUR FINAL SAS DATASET HERE> ; run; The below SAS syntax is an example of how to use the template within your SAS workflow. Here we create all of our variable and value labels. This could be within one or multiple sas scripts but for demonstration purposes, we only use one script. In your existing workflows, these may also include analyses and other PROC calls for data exploration Example my_existing_sas_workflow.sas /*2. Read in input data */ proc import datafile= \"myprojectfolder/input/mydata.csv\" out =raw dbms=csv replace ; getnames=yes ; run; /*3. Set up proc format and apply formats and variable labels in data step */ proc format; VALUE YESNO 0 = \"No\" 1 = \"Yes\" VALUE PUBLIC 1 = 'State mental health authority (SMHA)' 2 = 'Other state government agency or department' 3 = 'Regional/district authority or county, local, or municipal government' 4 = 'Tribal government' 5 = 'Indian Health Service' 6 = 'Department of Veterans Affairs' 7 = 'Other' VALUE FOCUS 1 = 'Mental health treatment' 2 = 'Substance abuse treatment' 3 = 'Mix of mental health and substance abuse treatment (neither is primary)' 4 = 'General health care' 5 = 'Other service focus' ; **Apply formats; data processed; set raw; format YOUNGADULTS TREATPSYCHOTHRPY TREATTRAUMATHRPY YESNO. FOCUS FOCUS. PUBLIC PUBLIC.; label YOUNGADULTS= \"Accepts young adults (aged 18-25 years old) for Tx\" TREATPSYCHOTHRPY= \"Facility offers individual psychotherapy\" TREATTRAUMATHRPY= \"Facility offers trauma therapy\" FOCUS= \"Primary treatment focus of facility\" PUBLIC= \"Public agency or department that operates facility\" ; run; This second script called my_output.sas is the filled out template ( see here ). Note the %INCLUDE function that calls my_existing_sas_workflow.sas my_output.sas /*1. Read in data file without value labels and run full code. Note: The most important pieces to run here are the PROC FORMAT statement(s) and any data steps that assign formats and variable labels which are needed for the data dictionary*/ %INCLUDE \"myprojectfolder/myworkflow.sas\" ; /* THIS WILL RUN A SEPARATE SAS SCRIPT*/ /*2. Output the format catalog (sas7bcat) */ libname out \"myprojectfolder/output\" ; /*2b. Output the format catalog. The format catalog is automatically stored in work.formats. This step copies the format file to the out directory as a sas7bcat file.*/ proc catalog cat=work . FORMATS; copy out = out . FORMATS ; run; /*3. Output the data file (sas7bdat) to your output folder*/ data out . yourdata; set processed ; run;","title":"Creating a sas7bdat and a sas7bcat file"},{"location":"supported_input_formats/#run-the-vlmd-command_1","text":"After creating the necessary sas7bdat and sas7bcat files, you can then run the vlmd command. Note, the sas7bcat files are optional. However, if you don't include, the encodings (ie value labels) will not be added. vlmd --filepath input/data.sas7bdat --sas7bcat-filepath input/formats.sas7bcat --inputtype sas7bdat","title":"Run the vlmd command"},{"location":"supported_input_formats/#spss-sav-files","text":"For SPSS users, HEAL data utilities generates heal-compliant data dictioanries from SPSS's default file format for storing datasets: A SAV file. It not only stores the data itself but also stores metadata such as variable names, variable labels, types, and value labels. The HEAL data utilities extracts the data and metadata to create heal-compliant data dictionaries.","title":"SPSS .sav files"},{"location":"supported_input_formats/#run-the-vlmd-command_2","text":"vlmd --filepath data/example_pyreadstat_output.sav --inputtype sav","title":"Run the vlmd command"},{"location":"supported_input_formats/#stata-dta-files","text":"For Stata users, HEAL data utilities generates heal-compliant data dictionaries through Stata's default file format: the DTA files. DTA files not only store the data itself but also stores metadata such as variable names, variable labels, types, and value labels.","title":"Stata .dta files"},{"location":"supported_input_formats/#run-the-vlmd-command_3","text":"vlmd --filepath data/example_pyreadstat_output.dta --inputtype dta","title":"Run the vlmd command"},{"location":"supported_input_formats/#csv-datasets","text":"","title":"csv Datasets"},{"location":"supported_input_formats/#heal-data-dictionary-template","text":"","title":"HEAL data dictionary template"}]}